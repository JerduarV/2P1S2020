/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaJSharp = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,11],$V2=[1,10],$V3=[1,9],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[5,12,16,17,29,31,32,33,34,73,75,76],$Vc=[17,19,27],$Vd=[5,10,12,14,16,17,24,29,31,32,33,34,73,75,76],$Ve=[2,111],$Vf=[5,10,12,16,17,29,31,32,33,34,38,53,57,59,60,61,62,63,66,69,70,71,73,75,76],$Vg=[1,39],$Vh=[5,12,14,16,17,29,31,32,33,34,73,75,76],$Vi=[1,53],$Vj=[1,77],$Vk=[1,60],$Vl=[1,62],$Vm=[1,59],$Vn=[1,65],$Vo=[1,68],$Vp=[1,70],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[1,94],$Vx=[1,96],$Vy=[14,27],$Vz=[5,10,12,14,16,17,21,27,29,31,32,33,34,38,53,57,59,60,61,62,63,66,69,70,71,73,75,76],$VA=[1,103],$VB=[1,104],$VC=[1,105],$VD=[5,10,12,14,16,17,21,27,29,31,32,33,34,38,53,57,58,59,60,61,62,63,66,69,70,71,73,75,76,82,83,84],$VE=[1,118],$VF=[1,119],$VG=[1,120],$VH=[1,121],$VI=[1,122],$VJ=[1,123],$VK=[5,10,12,14,16,17,21,27,29,31,32,33,34,38,53,57,58,59,60,61,62,63,66,69,70,71,73,75,76,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100],$VL=[2,142],$VM=[1,124],$VN=[1,125],$VO=[1,126],$VP=[1,128],$VQ=[5,10,12,14,16,17,21,24,27,29,31,32,33,34,38,51,52,53,57,58,59,60,61,62,63,66,69,70,71,73,75,76,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,111],$VR=[2,160],$VS=[1,131],$VT=[1,132],$VU=[1,144],$VV=[1,163],$VW=[1,171],$VX=[1,169],$VY=[1,170],$VZ=[1,168],$V_=[1,167],$V$=[1,166],$V01=[1,165],$V11=[1,164],$V21=[1,161],$V31=[14,38],$V41=[1,210],$V51=[5,12,16,17,29,31,32,33,34,38,53,57,59,60,61,62,63,66,69,70,71,73,75,76],$V61=[14,21],$V71=[5,12,16,17,29,31,32,33,34,38,53,57,59,60,61,62,63,66,68,69,70,71,73,75,76],$V81=[16,17,31,32,33,34,38,53,57,59,60,61,62,63,66,69,70,71,73,75,76],$V91=[1,235],$Va1=[1,238],$Vb1=[10,16,17,31,32,33,34,38,53,57,59,60,61,62,63,66,69,70,71,73,75,76],$Vc1=[5,10,12,14,16,17,21,27,29,31,32,33,34,38,53,57,58,59,60,61,62,63,66,69,70,71,73,75,76,82,83,84,88,89,90,91,92,93,94,95,96],$Vd1=[5,10,12,14,16,17,21,27,29,31,32,33,34,38,53,57,58,59,60,61,62,63,66,69,70,71,73,75,76,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99],$Ve1=[5,10,12,14,16,17,19,21,24,27,29,31,32,33,34,38,51,52,53,57,58,59,60,61,62,63,66,69,70,71,73,75,76,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,111],$Vf1=[1,262],$Vg1=[1,334],$Vh1=[1,335],$Vi1=[38,57,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"JS_BODY":4,"EOF":5,"JS_BODY_DEC":6,"METHOD_DEC":7,"STRC_DEC":8,"VAR_DEC":9,"PTCOMA":10,"IMPORT":11,"RIMPORT":12,"LISTA_FILES":13,"COMA":14,"ID_FILE":15,"RDEFINE":16,"ID":17,"RAS":18,"CORIZQ":19,"LISTA_ATRIB":20,"CORDER":21,"ATRIB":22,"TYPE":23,"IGUAL":24,"VAR_INIT":25,"PARIZQ":26,"PARDER":27,"BLOCK_SENT":28,"RVOID":29,"L_PARAMS":30,"RINTEGER":31,"RDOUBLE":32,"RCHAR":33,"RBOOLEAN":34,"PARAM":35,"LLAVEIZQ":36,"L_SENT":37,"LLAVEDER":38,"SENT":39,"PRINT":40,"ASIGNACION":41,"WHILE":42,"DOWHILE":43,"IF":44,"FOR":45,"RETURN":46,"BREAK":47,"CONTINUE":48,"SWITCH":49,"L_ACCESO":50,"INCREMENTO":51,"DECREMENTO":52,"RSWITCH":53,"EXP":54,"L_CASOS":55,"CASO":56,"RCASE":57,"DOSPT":58,"RDEFAULT":59,"RBREAK":60,"RCONTINUE":61,"RRETURN":62,"RFOR":63,"FOR_INIT":64,"ACTUALIZACION":65,"RIF":66,"ELSE":67,"RELSE":68,"RDO":69,"RWHILE":70,"RPRINT":71,"L_ID":72,"RVAR":73,"DOSPTIGUAL":74,"RCONST":75,"RGLOBAL":76,"ARRAY_INIT":77,"LISTA_ARRAY":78,"LISTA_EXP":79,"ELEMENTO":80,"DOLAR":81,"AND":82,"OR":83,"XOR":84,"NOT":85,"EXPR":86,"EXP2":87,"MAYOR":88,"MENOR":89,"MAYORIGUAL":90,"MENORIGUAL":91,"IGUALQUE":92,"DIFERENTE":93,"IGUALREF":94,"MAS":95,"MENOS":96,"POR":97,"DIV":98,"MOD":99,"POT":100,"LITERAL":101,"INSTANCIA_STRC":102,"RNULL":103,"LIT_INTEGER":104,"LIT_CHAR":105,"LIT_DOUBLE":106,"LIT_STRING":107,"RTRUE":108,"RFALSE":109,"RSTRC":110,"PUNTO":111,"ACCESO":112,"ACCESO_ARREGLO":113,"CALL_METHOD":114,"L_PARAM2":115,"PARAM2":116,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"PTCOMA",12:"RIMPORT",14:"COMA",15:"ID_FILE",16:"RDEFINE",17:"ID",18:"RAS",19:"CORIZQ",21:"CORDER",24:"IGUAL",26:"PARIZQ",27:"PARDER",29:"RVOID",31:"RINTEGER",32:"RDOUBLE",33:"RCHAR",34:"RBOOLEAN",36:"LLAVEIZQ",38:"LLAVEDER",51:"INCREMENTO",52:"DECREMENTO",53:"RSWITCH",57:"RCASE",58:"DOSPT",59:"RDEFAULT",60:"RBREAK",61:"RCONTINUE",62:"RRETURN",63:"RFOR",66:"RIF",68:"RELSE",69:"RDO",70:"RWHILE",71:"RPRINT",73:"RVAR",74:"DOSPTIGUAL",75:"RCONST",76:"RGLOBAL",81:"DOLAR",82:"AND",83:"OR",84:"XOR",85:"NOT",88:"MAYOR",89:"MENOR",90:"MAYORIGUAL",91:"MENORIGUAL",92:"IGUALQUE",93:"DIFERENTE",94:"IGUALREF",95:"MAS",96:"MENOS",97:"POR",98:"DIV",99:"MOD",100:"POT",103:"RNULL",104:"LIT_INTEGER",105:"LIT_CHAR",106:"LIT_DOUBLE",107:"LIT_STRING",108:"RTRUE",109:"RFALSE",110:"RSTRC",111:"PUNTO"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[6,1],[11,2],[13,3],[13,1],[8,6],[8,5],[20,3],[20,1],[22,2],[22,2],[22,4],[22,4],[22,4],[22,4],[22,6],[22,6],[7,5],[7,5],[7,5],[7,6],[7,6],[7,6],[7,7],[7,7],[7,8],[7,8],[23,1],[23,1],[23,1],[23,1],[30,3],[30,1],[28,3],[28,2],[37,2],[37,1],[39,2],[39,1],[39,2],[39,1],[39,2],[39,1],[39,1],[39,2],[39,1],[39,1],[39,1],[39,1],[39,2],[39,1],[39,2],[39,1],[39,1],[39,1],[39,2],[39,3],[39,3],[39,2],[39,2],[49,7],[55,2],[55,1],[56,4],[56,3],[47,1],[48,1],[46,3],[46,2],[45,9],[45,7],[45,8],[45,8],[45,7],[45,7],[45,6],[65,1],[65,1],[64,1],[64,1],[44,5],[44,6],[67,2],[67,2],[43,6],[42,5],[41,3],[40,4],[35,2],[35,2],[35,4],[35,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,2],[9,2],[9,6],[9,6],[9,4],[9,4],[72,3],[72,1],[25,1],[25,1],[77,3],[78,3],[78,1],[79,3],[79,1],[80,1],[80,2],[54,3],[54,3],[54,3],[54,2],[54,4],[54,1],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,1],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,1],[87,2],[87,2],[87,2],[87,1],[87,1],[87,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[102,4],[102,5],[102,5],[50,3],[50,1],[112,1],[112,1],[112,1],[112,4],[113,4],[114,4],[114,3],[114,4],[115,3],[115,1],[116,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; console.log($$[$0-1]);
break;
case 2: case 68:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$ = [$$[$0]];            
break;
case 4: case 5: case 8: case 45: case 47: case 49: case 50: case 52: case 53: case 54: case 55: case 57: case 59: case 60: case 61: case 83: case 84: case 85: case 86: case 112: case 113: case 119: case 126: case 134: case 146: case 147: case 161: case 162:
 this.$ = $$[$0]; 
break;
case 6:
 this.$ = $$[$0-1]; this.$.dec_interna = false; 
break;
case 7:
 this.$ = $$[$0]; this.$.dec_interna = false; 
break;
case 9:
 this.$ = new Import($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 10: case 14: case 38: case 110: case 115: case 117: case 158: case 168:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 11: case 15: case 39: case 43: case 69: case 111: case 116: case 118: case 159: case 169:
 this.$ = [$$[$0]]; 
break;
case 12:
 this.$ = new DefStruct($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 13:
 this.$ = new DefStruct($$[$0-3],[],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 16: case 17:
 this.$ = new Atributo(new Tipo($$[$0-1],0),$$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 18: case 19:
 this.$ = new Atributo(new Tipo($$[$0-3],0),$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 20: case 21:
 this.$ = new Atributo(new Tipo($$[$0-3],1),$$[$0],null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 22: case 23:
 this.$ = new Atributo(new Tipo($$[$0-5],1),$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 24:
 this.$ = new DecFun(new Tipo($$[$0-4],0),$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 25:
 this.$ = new DecFun(new Tipo(VOID,0),$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 26:
 this.$ = new DecFun(new Tipo($$[$0-4],0),$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 27: case 29:
 this.$ = new DecFun(new Tipo($$[$0-5],0),$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 28:
 this.$ = new DecFun(new Tipo(VOID,0),$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 30: case 31:
 this.$ = new DecFun(new Tipo($$[$0-6],1),$$[$0-3],[],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 32: case 33:
 this.$ = new DecFun(new Tipo($$[$0-7],1),$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 34:
 this.$ = INT 
break;
case 35:
 this.$ = DOUBLE 
break;
case 36:
 this.$ = CHAR 
break;
case 37:
 this.$ = BOOL 
break;
case 40: case 44: case 46: case 48: case 51: case 56: case 58: case 141:
 this.$ = $$[$0-1]; 
break;
case 41:
 this.$ = []; 
break;
case 42:
 this.$ = $$[$0-1]; this.$.push($$[$0]) 
break;
case 62:
 this.$ = new Acceso($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 63:
 this.$ = new IncDec(new Acceso($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),1,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 64:
 this.$ = new IncDec(new Acceso($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),-1,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 65: case 143:
 this.$ = new IncDec(new Acceso($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),1,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 66: case 144:
 this.$ = new IncDec(new Acceso($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),-1,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 67:
 this.$ = new Switch($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 70:
 this.$ = new Caso($$[$0-2],$$[$0]); 
break;
case 71:
 this.$ = new Caso(null,$$[$0]); 
break;
case 72:
 this.$ = new Break(_$[$0].first_line,_$[$0].first_column); 
break;
case 73:
 this.$ = new Continue(_$[$0].first_line,_$[$0].first_column); 
break;
case 74:
 this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 75:
 this.$ = new Return(null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 76:
 this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column); 
break;
case 77:
 this.$ = new For($$[$0-4],null,null,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 78:
 this.$ = new For($$[$0-5],$$[$0-3],null,$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 79:
 this.$ = new For(null,$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 80:
 this.$ = new For(null,null,$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 81:
 this.$ = new For(null,$$[$0-3],null,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 82:
 this.$ = new For(null,null,null,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 87:
 this.$ = new IF($$[$0-2],$$[$0],null,_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 88:
 this.$ = new IF($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 89:
 this.$ = new Else(null,$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 90:
 this.$ = new Else($$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 91:
 this.$ = new DoWhile($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 92:
 this.$ = new While($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 93:
 this.$ = new Asignacion(new Acceso($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 94:
 this.$ = new Print($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 95: case 96:
 this.$ = new ParametroFormal(new Tipo($$[$0-1],0),$$[$0]); 
break;
case 97:
 this.$ = new ParametroFormal(new Tipo($$[$0-3],1),$$[$0]); 
break;
case 98:
 this.$ = new ParametroFormal(new Tipo($$[$0-3],1),$$[$0])  
break;
case 99:
 this.$ = new DeclaracionJ(new Tipo($$[$0-3],0),$$[$0-2],false,false,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);  
break;
case 100:
 this.$ = new DeclaracionJ(new Tipo($$[$0-3],0),$$[$0-2],false,false,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);        
break;
case 101:
 this.$ = new DeclaracionJ(new Tipo('$VAR',0),[$$[$0-2]],false,false,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);  
break;
case 102:
 this.$ = new DeclaracionJ(null,[$$[$0-2]],true,false,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);     
break;
case 103:
 this.$ = new DeclaracionJ(null,[$$[$0-2]],false,true,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);     
break;
case 104: case 105:
 this.$ = new DeclaracionJ(new Tipo($$[$0-1],0),$$[$0],false,false,null,_$[$0-1].first_line,_$[$0-1].first_column);      
break;
case 106: case 107:
 this.$ = new DeclaracionJ(new Tipo($$[$0-5],1),$$[$0-2],false,false,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 108: case 109:
 this.$ = new DeclaracionJ(new Tipo($$[$0-3],1),$$[$0],false,false,null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 114:
 this.$ = new ArrayInit($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 120:
 this.$ = new Dolar(new Acceso($$[$0],_$[$0-1].first_line,_$[$0-1].first_column),_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 121:
 this.$ = new OpeLogica(TipoOpeJ.AND,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 122:
 this.$ = new OpeLogica(TipoOpeJ.OR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 123:
 this.$ = new OpeLogica(TipoOpeJ.XOR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 124:
 this.$ = new OpeLogica(TipoOpeJ.NOT,$$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 125:
 this.$ = new CasteoExplicito(new Tipo($$[$0-2],0),$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 127:
 this.$ = new OpeRel(TipoOpeJ.MAYOR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 128:
 this.$ = new OpeRel(TipoOpeJ.MENOR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 129:
 this.$ = new OpeRel(TipoOpeJ.MAYORIGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 130:
 this.$ = new OpeRel(TipoOpeJ.MENORIGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 131:
 this.$ = new OpeRel(TipoOpeJ.IGUALQUE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 132:
 this.$ = new OpeRel(TipoOpeJ.DIFERENTE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 133:
 this.$ = new OpeRel(TipoOpeJ.IGUALREF,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 135:
 this.$ = new OpeArit(TipoOpeJ.SUMA,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 136:
 this.$ = new OpeArit(TipoOpeJ.RESTA,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 137:
 this.$ = new OpeArit(TipoOpeJ.MULT,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 138:
 this.$ = new OpeArit(TipoOpeJ.DIV,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 139:
 this.$ = new OpeArit(TipoOpeJ.MOD,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 140:
 this.$ = new OpeArit(TipoOpeJ.POT,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 142:
 this.$ = new Acceso($$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
case 145:
 this.$ = new OpeArit(TipoOpeJ.NEGATIVO,$$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 148:
 this.$ = new Null(_$[$0].first_line,_$[$0].first_column); 
break;
case 149:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_INT,_$[$0].first_line,_$[$0].first_column);      
break;
case 150:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_CHAR,_$[$0].first_line,_$[$0].first_column);     
break;
case 151:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_DOUBLE,_$[$0].first_line,_$[$0].first_column);   
break;
case 152:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_STRING,_$[$0].first_line,_$[$0].first_column);   
break;
case 153:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_TRUE,_$[$0].first_line,_$[$0].first_column);     
break;
case 154:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_FALSE,_$[$0].first_line,_$[$0].first_column);    
break;
case 155:
 this.$ = new StrcStruct($$[$0-2],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 156: case 157:
 this.$ = new StrcArray(new Tipo($$[$0-3],1),$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 160:
 this.$ = new Identificador($$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
case 163:
 this.$ = new CallFunArray($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 164:
 this.$ = new AccesoArray($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 165:
 this.$ = new CallFun($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 166:
 this.$ = new CallFun($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 167:
 this.$ = new CallFun2($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 170:
 this.$ = new ParamT2($$[$0-2],$$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:$V0,16:$V1,17:$V2,23:8,29:$V3,31:$V4,32:$V5,33:$V6,34:$V7,73:$V8,75:$V9,76:$Va},{1:[3]},{5:[1,20],6:21,7:4,8:5,9:6,11:7,12:$V0,16:$V1,17:$V2,23:8,29:$V3,31:$V4,32:$V5,33:$V6,34:$V7,73:$V8,75:$V9,76:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,7],{10:[1,22]}),o($Vb,[2,8]),{17:[1,23],19:[1,24],72:25},{17:[1,26]},{17:[1,27],19:[1,28],72:29},{17:[1,30]},{17:[1,31]},{17:[1,32]},{17:[1,33]},{13:34,15:[1,35]},o($Vc,[2,34]),o($Vc,[2,35]),o($Vc,[2,36]),o($Vc,[2,37]),{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,6]),o($Vd,$Ve,{26:[1,36]}),{21:[1,37]},o($Vf,[2,104],{14:$Vg,24:[1,38]}),{26:[1,40]},o($Vd,$Ve,{26:[1,41]}),{21:[1,42]},o($Vf,[2,105],{14:$Vg,24:[1,43]}),{18:[1,44]},{74:[1,45]},{74:[1,46]},{74:[1,47]},o($Vb,[2,9],{14:[1,48]}),o($Vh,[2,11]),{17:$Vi,23:52,27:[1,49],30:50,31:$V4,32:$V5,33:$V6,34:$V7,35:51},{17:[1,54],72:55},{17:$Vj,25:56,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:[1,80]},{17:$Vi,23:52,27:[1,81],30:82,31:$V4,32:$V5,33:$V6,34:$V7,35:51},{17:$Vi,23:52,27:[1,83],30:84,31:$V4,32:$V5,33:$V6,34:$V7,35:51},{17:[1,85],72:86},{17:$Vj,25:87,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{19:[1,88]},{17:$Vj,25:89,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,25:90,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,25:91,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{15:[1,92]},{28:93,36:$Vw},{14:$Vx,27:[1,95]},o($Vy,[2,39]),{17:[1,97],19:[1,98]},{17:[1,99],19:[1,100]},o($Vd,$Ve,{26:[1,101]}),o($Vf,[2,108],{14:$Vg,24:[1,102]}),o($Vf,[2,99]),o($Vz,[2,112],{82:$VA,83:$VB,84:$VC}),o($Vz,[2,113]),{17:$Vj,26:$Vk,50:64,54:106,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,23:107,26:$Vk,31:$V4,32:$V5,33:$V6,34:$V7,50:64,54:108,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},o($VD,[2,126]),{17:$Vj,26:$Vk,50:64,54:110,78:109,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},o($VD,[2,134],{88:[1,111],89:[1,112],90:[1,113],91:[1,114],92:[1,115],93:[1,116],94:[1,117],95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ}),o($VK,$VL,{51:$VM,52:$VN,111:$VO}),{17:$Vj,26:$VP,50:64,87:127,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},o($VK,[2,146]),o($VK,[2,147]),o($VK,[2,148]),o($VQ,[2,159]),o($VK,[2,149]),o($VK,[2,150]),o($VK,[2,151]),o($VK,[2,152]),o($VK,[2,153]),o($VK,[2,154]),{17:[1,129],23:130,31:$V4,32:$V5,33:$V6,34:$V7},o($VQ,$VR,{19:$VS,26:$VT}),o($VQ,[2,161]),o($VQ,[2,162],{19:[1,133]}),o([5,10,12,14,16,17,24,29,31,32,33,34,38,53,57,59,60,61,62,63,66,69,70,71,73,75,76],[2,110]),{28:134,36:$Vw},{14:$Vx,27:[1,135]},{28:136,36:$Vw},{14:$Vx,27:[1,137]},o($Vd,$Ve,{26:[1,138]}),o($Vf,[2,109],{14:$Vg,24:[1,139]}),o($Vf,[2,100]),{17:$VU,20:140,21:[1,141],22:142,23:143,31:$V4,32:$V5,33:$V6,34:$V7},o($Vf,[2,101]),o($Vf,[2,102]),o($Vf,[2,103]),o($Vh,[2,10]),o($Vb,[2,24]),{8:158,9:149,16:$V1,17:$VV,23:162,31:$V4,32:$V5,33:$V6,34:$V7,37:145,38:[1,146],39:147,40:148,41:150,42:151,43:152,44:153,45:154,46:155,47:156,48:157,49:159,50:160,53:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,66:$V$,69:$V01,70:$V11,71:$V21,73:$V8,75:$V9,76:$Va,112:69,113:78,114:79},{28:172,36:$Vw},{17:$Vi,23:52,31:$V4,32:$V5,33:$V6,34:$V7,35:173},o($Vy,[2,95]),{21:[1,174]},o($Vy,[2,96]),{21:[1,175]},{17:$Vi,23:52,27:[1,176],30:177,31:$V4,32:$V5,33:$V6,34:$V7,35:51},{17:$Vj,25:178,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$Vk,50:64,54:179,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$Vk,50:64,54:180,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$Vk,50:64,54:181,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},o($VD,[2,124]),{27:[1,182]},{27:[1,183],82:$VA,83:$VB,84:$VC},{14:[1,185],38:[1,184]},o($V31,[2,116],{82:$VA,83:$VB,84:$VC}),{17:$Vj,26:$VP,50:64,87:186,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$VP,50:64,87:187,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$VP,50:64,87:188,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$VP,50:64,87:189,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$VP,50:64,87:190,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$VP,50:64,87:191,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$VP,50:64,87:192,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$VP,50:64,87:193,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$VP,50:64,87:194,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$VP,50:64,87:195,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$VP,50:64,87:196,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$VP,50:64,87:197,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$VP,50:64,87:198,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},o($VK,[2,143]),o($VK,[2,144]),{17:$Vj,112:199,113:78,114:79},o($VK,[2,145]),{17:$Vj,26:$Vk,50:64,54:108,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{19:[1,201],26:[1,200]},{19:[1,202]},{17:$Vj,26:$Vk,50:64,54:203,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:[1,211],25:209,26:$Vk,27:[1,205],36:$Vl,50:64,54:57,77:58,79:204,80:207,81:$V41,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79,115:206,116:208},{17:$Vj,26:$Vk,50:64,54:212,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},o($Vb,[2,25]),{28:213,36:$Vw},o($Vb,[2,26]),{28:214,36:$Vw},{17:$Vi,23:52,27:[1,215],30:216,31:$V4,32:$V5,33:$V6,34:$V7,35:51},{17:$Vj,25:217,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{14:[1,219],21:[1,218]},o($V51,[2,13]),o($V61,[2,15]),{17:[1,220],19:[1,221]},{17:[1,222],19:[1,223]},{8:158,9:149,16:$V1,17:$VV,23:162,31:$V4,32:$V5,33:$V6,34:$V7,38:[1,224],39:225,40:148,41:150,42:151,43:152,44:153,45:154,46:155,47:156,48:157,49:159,50:160,53:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,66:$V$,69:$V01,70:$V11,71:$V21,73:$V8,75:$V9,76:$Va,112:69,113:78,114:79},o($V71,[2,41]),o($V81,[2,43]),o($V81,[2,45],{10:[1,226]}),o($V81,[2,47],{10:[1,227]}),o($V81,[2,49],{10:[1,228]}),o($V81,[2,50]),o($V81,[2,52],{10:[1,229]}),o($V81,[2,53]),o($V81,[2,54]),o($V81,[2,55]),o($V81,[2,57],{10:[1,230]}),o($V81,[2,59],{10:[1,231]}),o($V81,[2,60]),o($V81,[2,61]),{10:[1,232],24:$V91,51:[1,233],52:[1,234],111:$VO},{26:[1,236]},{17:$Va1,19:[1,237],72:25},o([10,24,51,52,111],$VR,{72:29,17:$Va1,19:[1,239],26:$VT}),{26:[1,240]},{28:241,36:$Vw},{26:[1,242]},{26:[1,243]},{10:[1,245],17:$Vj,25:244,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},o($Vb1,[2,72]),o($Vb1,[2,73]),{26:[1,246]},o($Vb,[2,27]),o($Vy,[2,38]),{17:[1,247]},{17:[1,248]},{28:249,36:$Vw},{14:$Vx,27:[1,250]},o($Vf,[2,106]),o($VD,[2,121]),o([5,10,12,14,16,17,21,27,29,31,32,33,34,38,53,57,58,59,60,61,62,63,66,69,70,71,73,75,76,83],[2,122],{82:$VA,84:$VC}),o([5,10,12,14,16,17,21,27,29,31,32,33,34,38,53,57,58,59,60,61,62,63,66,69,70,71,73,75,76,83,84],[2,123],{82:$VA}),{17:$Vj,26:$Vk,50:64,54:251,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},o($VK,[2,141]),o($Vz,[2,114]),{17:$Vj,26:$Vk,50:64,54:252,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},o($VD,[2,127],{95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ}),o($VD,[2,128],{95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ}),o($VD,[2,129],{95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ}),o($VD,[2,130],{95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ}),o($VD,[2,131],{95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ}),o($VD,[2,132],{95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ}),o($VD,[2,133],{95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ}),o($Vc1,[2,135],{97:$VG,98:$VH,99:$VI,100:$VJ}),o($Vc1,[2,136],{97:$VG,98:$VH,99:$VI,100:$VJ}),o($Vd1,[2,137],{100:$VJ}),o($Vd1,[2,138],{100:$VJ}),o($Vd1,[2,139],{100:$VJ}),o($VK,[2,140]),o($VQ,[2,158]),{27:[1,253]},{17:$Vj,26:$Vk,50:64,54:254,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$Vk,50:64,54:255,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{21:[1,256],82:$VA,83:$VB,84:$VC},{14:[1,258],27:[1,257]},o($Ve1,[2,166]),{14:[1,260],27:[1,259]},o($Vy,[2,118]),o($Vy,[2,169]),o($Vy,[2,119]),{17:$Vj,50:261,112:69,113:78,114:79},o([14,27,51,52,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,111],$VR,{19:$VS,24:$Vf1,26:$VT}),{21:[1,263],82:$VA,83:$VB,84:$VC},o($Vb,[2,28]),o($Vb,[2,29]),{28:264,36:$Vw},{14:$Vx,27:[1,265]},o($Vf,[2,107]),o($V51,[2,12]),{17:$VU,22:266,23:143,31:$V4,32:$V5,33:$V6,34:$V7},o($V61,[2,16],{24:[1,267]}),{21:[1,268]},o($V61,[2,17],{24:[1,269]}),{21:[1,270]},o($V71,[2,40]),o($V81,[2,42]),o($V81,[2,44]),o($V81,[2,46]),o($V81,[2,48]),o($V81,[2,51]),o($V81,[2,56]),o($V81,[2,58]),o($V81,[2,62]),o($V81,[2,65],{10:[1,271]}),o($V81,[2,66],{10:[1,272]}),{17:$Vj,25:273,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$Vk,50:64,54:274,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{21:[1,275]},o([10,14,16,17,24,31,32,33,34,38,53,57,59,60,61,62,63,66,69,70,71,73,75,76],$Ve),{17:$Vj,21:[1,276],26:$Vk,50:64,54:203,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,26:$Vk,50:64,54:277,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{70:[1,278]},{17:$Vj,26:$Vk,50:64,54:279,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{9:282,10:[1,281],17:$VV,23:162,31:$V4,32:$V5,33:$V6,34:$V7,41:283,50:284,64:280,73:$V8,75:$V9,76:$Va,112:69,113:78,114:79},{10:[1,285]},o($V81,[2,75]),{17:$Vj,26:$Vk,50:64,54:286,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},o($Vy,[2,97]),o($Vy,[2,98]),o($Vb,[2,30]),{28:287,36:$Vw},o([5,10,12,14,16,17,21,27,29,31,32,33,34,38,53,57,58,59,60,61,62,63,66,69,70,71,73,75,76],[2,125],{82:$VA,83:$VB,84:$VC}),o($V31,[2,115],{82:$VA,83:$VB,84:$VC}),o($VK,[2,155]),{21:[1,288],82:$VA,83:$VB,84:$VC},{21:[1,289],82:$VA,83:$VB,84:$VC},o($VQ,[2,164]),o($Ve1,[2,165]),{17:$Vj,25:209,26:$Vk,36:$Vl,50:64,54:57,77:58,80:290,81:$V41,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},o($Ve1,[2,167]),{17:[1,292],116:291},o($Vy,[2,120],{111:$VO}),{17:$Vj,25:293,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},o($VQ,[2,163]),o($Vb,[2,31]),{28:294,36:$Vw},o($V61,[2,14]),{17:$Vj,25:295,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:[1,296]},{17:$Vj,25:297,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:[1,298]},o($V81,[2,63]),o($V81,[2,64]),o([10,16,17,27,31,32,33,34,38,53,57,59,60,61,62,63,66,69,70,71,73,75,76],[2,93]),{27:[1,299],82:$VA,83:$VB,84:$VC},{17:$Va1,72:55},{17:$Va1,72:86},{27:[1,300],82:$VA,83:$VB,84:$VC},{26:[1,301]},{27:[1,302],82:$VA,83:$VB,84:$VC},{10:[1,303]},{10:[1,305],17:$Vj,26:$Vk,50:64,54:304,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{10:[2,85]},{10:[2,86]},{24:$V91,111:$VO},o($V81,[2,74]),{27:[1,306],82:$VA,83:$VB,84:$VC},o($Vb,[2,32]),o($VK,[2,156]),o($VK,[2,157]),o($Vy,[2,117]),o($Vy,[2,168]),{24:$Vf1},o($Vy,[2,170]),o($Vb,[2,33]),o($V61,[2,18]),o($V61,[2,20],{24:[1,307]}),o($V61,[2,19]),o($V61,[2,21],{24:[1,308]}),o($Vb1,[2,94]),{28:309,36:$Vw},{17:$Vj,26:$Vk,50:64,54:310,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{28:311,36:$Vw},{10:[1,313],17:$Vj,26:$Vk,50:64,54:312,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{10:[1,314],82:$VA,83:$VB,84:$VC},{17:$Vj,26:$Vk,27:[1,316],41:318,50:319,54:317,65:315,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{36:[1,320]},{17:$Vj,25:321,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{17:$Vj,25:322,26:$Vk,36:$Vl,50:64,54:57,77:58,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},o($V81,[2,92]),{27:[1,323],82:$VA,83:$VB,84:$VC},o($V81,[2,87],{67:324,68:[1,325]}),{10:[1,326],82:$VA,83:$VB,84:$VC},{27:[1,327]},{17:$Vj,26:$Vk,27:[1,329],41:318,50:319,54:317,65:328,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{27:[1,330]},{28:331,36:$Vw},{27:[2,83],82:$VA,83:$VB,84:$VC},{27:[2,84]},o([27,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100],$VL,{24:$V91,51:$VM,52:$VN,111:$VO}),{55:332,56:333,57:$Vg1,59:$Vh1},o($V61,[2,22]),o($V61,[2,23]),o($Vb1,[2,91]),o($V81,[2,88]),{28:337,36:$Vw,44:336,66:$V$},{17:$Vj,26:$Vk,27:[1,339],41:318,50:319,54:317,65:338,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{28:340,36:$Vw},{27:[1,341]},{28:342,36:$Vw},{28:343,36:$Vw},o($V81,[2,82]),{38:[1,344],56:345,57:$Vg1,59:$Vh1},o($Vi1,[2,69]),{17:$Vj,26:$Vk,50:64,54:346,85:$Vm,86:61,87:63,96:$Vn,101:66,102:67,103:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,112:69,113:78,114:79},{58:[1,347]},o($V81,[2,89]),o($V81,[2,90]),{27:[1,348]},{28:349,36:$Vw},o($V81,[2,77]),{28:350,36:$Vw},o($V81,[2,81]),o($V81,[2,80]),o($V81,[2,67]),o($Vi1,[2,68]),{58:[1,351],82:$VA,83:$VB,84:$VC},{8:158,9:149,16:$V1,17:$VV,23:162,31:$V4,32:$V5,33:$V6,34:$V7,37:352,39:147,40:148,41:150,42:151,43:152,44:153,45:154,46:155,47:156,48:157,49:159,50:160,53:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,66:$V$,69:$V01,70:$V11,71:$V21,73:$V8,75:$V9,76:$Va,112:69,113:78,114:79},{28:353,36:$Vw},o($V81,[2,78]),o($V81,[2,79]),{8:158,9:149,16:$V1,17:$VV,23:162,31:$V4,32:$V5,33:$V6,34:$V7,37:354,39:147,40:148,41:150,42:151,43:152,44:153,45:154,46:155,47:156,48:157,49:159,50:160,53:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,66:$V$,69:$V01,70:$V11,71:$V21,73:$V8,75:$V9,76:$Va,112:69,113:78,114:79},o($Vi1,[2,71],{112:69,113:78,114:79,40:148,9:149,41:150,42:151,43:152,44:153,45:154,46:155,47:156,48:157,8:158,49:159,50:160,23:162,39:225,16:$V1,17:$VV,31:$V4,32:$V5,33:$V6,34:$V7,53:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,66:$V$,69:$V01,70:$V11,71:$V21,73:$V8,75:$V9,76:$Va}),o($V81,[2,76]),o($Vi1,[2,70],{112:69,113:78,114:79,40:148,9:149,41:150,42:151,43:152,44:153,45:154,46:155,47:156,48:157,8:158,49:159,50:160,23:162,39:225,16:$V1,17:$VV,31:$V4,32:$V5,33:$V6,34:$V7,53:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,66:$V$,69:$V01,70:$V11,71:$V21,73:$V8,75:$V9,76:$Va})],
defaultActions: {20:[2,1],282:[2,85],283:[2,86],318:[2,84]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var DeclaracionJ = require('../app/Compilador/InstruccionJ/DeclaracionJ').DeclaracionJ;
    var For = require('../app/Compilador/InstruccionJ/For').For;
    var Break = require('../app/Compilador/InstruccionJ/Break').Break;
    var Continue = require('../app/Compilador/InstruccionJ/Continue').Continue;
    var DefStruct = require('../app/Compilador/InstruccionJ/DefStruct').DefStruct;
    var Atributo = require('../app/Compilador/InstruccionJ/DefStruct').Atributo;
    var Return = require('../app/Compilador/InstruccionJ/Return').Return;
    var Asignacion = require('../app/Compilador/InstruccionJ/Asignacion').Asignacion;
    var Else = require('../app/Compilador/InstruccionJ/Else').Else;
    var IF = require('../app/Compilador/InstruccionJ/IF').IF;
    var DoWhile = require('../app/Compilador/InstruccionJ/DoWhile').DoWhile;
    var While = require('../app/Compilador/InstruccionJ/While').While;
    var Print = require('../app/Compilador/InstruccionJ/Print').Print;
    var DecFun = require('../app/Compilador/InstruccionJ/DecFun').DecFun;
    var Switch = require('../app/Compilador/InstruccionJ/Switch').Switch;
    var Caso = require('../app/Compilador/InstruccionJ/Switch').Caso;
    var Import = require('../app/Compilador/InstruccionJ/Import').Import;

    var LiteralJ = require('../app/Compilador/ExpresionJ/LiteralJ').LiteralJ;
    var Identificador = require('../app/Compilador/ExpresionJ/Identificador').Identificador;
    var Acceso = require('../app/Compilador/ExpresionJ/Acceso').Acceso;
    var AccesoArray = require('../app/Compilador/ExpresionJ/AccesoArray').AccesoArray;
    var IncDec = require('../app/Compilador/ExpresionJ/IncDec').IncDec;
    var Dolar = require('../app/Compilador/ExpresionJ/Dolar').Dolar;
    var CasteoExplicito = require('../app/Compilador/ExpresionJ/CasteoExplicito').CasteoExplicito;
    var TipoLit = require('../app/Compilador/ExpresionJ/LiteralJ').TipoLit;
    var Null = require('../app/Compilador/ExpresionJ/Null').Null;
    var CallFun = require('../app/Compilador/ExpresionJ/CallFun').CallFun;
    var CallFunArray = require('../app/Compilador/ExpresionJ/CallFunArray').CallFunArray;
    var ArrayInit = require('../app/Compilador/ExpresionJ/ArrayInit').ArrayInit;
    var CallFun2 = require('../app/Compilador/ExpresionJ/CallFun2').CallFun2;
    var ParamT2 = require('../app/Compilador/ExpresionJ/CallFun2').ParamT2;
    var TipoOpeJ = require('../app/Compilador/ExpresionJ/OperacionesJ/OperacionJ').TipoOpeJ;
    var StrcArray = require('../app/Compilador/ExpresionJ/STRC/StrcArray').StrcArray;
    var StrcStruct = require('../app/Compilador/ExpresionJ/STRC/StrcStruct').StrcStruct;
    var OpeArit = require('../app/Compilador/ExpresionJ/OperacionesJ/OpeArit').OpeArit;
    var OpeRel = require('../app/Compilador/ExpresionJ/OperacionesJ/OpeRel').OpeRel;
    var OpeLogica = require('../app/Compilador/ExpresionJ/OperacionesJ/OpeLogica').OpeLogica;
    var Tipo = require('../app/Compilador/TSJ/Tipo').Tipo;

    var DOUBLE = require('../app/Compilador/TSJ/Tipo').DOUBLE;
    var BOOL = require('../app/Compilador/TSJ/Tipo').BOOL;
    var STRING = require('../app/Compilador/TSJ/Tipo').STRING;
    var INT = require('../app/Compilador/TSJ/Tipo').INT;
    var CHAR = require('../app/Compilador/TSJ/Tipo').CHAR;
    var NULL = require('../app/Compilador/TSJ/Tipo').NULL;
    var VOID = require('../app/Compilador/TSJ/Tipo').VOID;



    var ParametroFormal = require('../app/Compilador/TSJ/ParametroFormal').ParametroFormal;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content */
break;
case 4:/* skip whitespace */
break;
case 5:return  'RNULL'
break;
case 6:return  'RINTEGER'
break;
case 7:return  'RDOUBLE'
break;
case 8:return  'RCHAR'
break;
case 9:return  'RBOOLEAN'
break;
case 10:return  'RIMPORT'
break;
case 11:return  'RVAR'
break;
case 12:return  'RCONST'
break;
case 13:return  'RGLOBAL'
break;
case 14:return  'RTRUE'
break;
case 15:return  'RFALSE'
break;
case 16:return  'RIF'
break;
case 17:return  'RELSE'
break;
case 18:return  'RSWITCH'
break;
case 19:return  'RCASE'
break;
case 20:return  'RDEFAULT'
break;
case 21:return  'RBREAK'
break;
case 22:return  'RCONTINUE'
break;
case 23:return  'RRETURN'
break;
case 24:return  'RPRINT'
break;
case 25:return  'RPUBLIC'
break;
case 26:return  'RPRIVATE'
break;
case 27:return  'RVOID'
break;
case 28:return  'RFOR'
break;
case 29:return  'RWHILE'
break;
case 30:return  'RDEFINE'
break;
case 31:return  'RAS'
break;
case 32:return  'RSTRC'
break;
case 33:return  'RDO'
break;
case 34:return  'RTRY'
break;
case 35:return  'RCATCH'
break;
case 36:return  'RTHROW'
break;
case 37:return  'LIT_DOUBLE'
break;
case 38:return  'LIT_INTEGER'
break;
case 39:return  'ID_FILE'
break;
case 40:return  'ID'
break;
case 41:return  'LIT_STRING'
break;
case 42:return  'LIT_CHAR'
break;
case 43:return  'INCREMENTO'
break;
case 44:return  'DECREMENTO'
break;
case 45:return  'POR'
break;
case 46:return  'DIV'
break;
case 47:return  'MENOS'
break;
case 48:return  'MAS'
break;
case 49:return  'POT'
break;
case 50:return  'MOD'
break;
case 51:return  'MAYORIGUAL'
break;
case 52:return  'MENORIGUAL'
break;
case 53:return  'IGUALREF'
break;
case 54:return  'IGUALQUE'
break;
case 55:return  'MENOR'
break;
case 56:return  'MAYOR'
break;
case 57:return  'DIFERENTE'
break;
case 58:return  'IGUAL'
break;
case 59:return  'AND'
break;
case 60:return  'OR'
break;
case 61:return  'NOT'
break;
case 62:return  'XOR'
break;
case 63:return  'TERNARIO'
break;
case 64:return  'PARIZQ'
break;
case 65:return  'PARDER'
break;
case 66:return  'CORIZQ'
break;
case 67:return  'CORDER'
break;
case 68:return  'LLAVEIZQ'
break;
case 69:return  'LLAVEDER'
break;
case 70:return  'DOSPTIGUAL'
break;
case 71:return  'IGUAL'
break;
case 72:return  'PTCOMA'
break;
case 73:return  'DOSPT'
break;
case 74:return  'COMA'
break;
case 75:return  'PUNTO'
break;
case 76:return  'DOLAR'
break;
case 77:return  'EOF'
break;
case 78:return  'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:import\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:public\b)/i,/^(?:private\b)/i,/^(?:void\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:do\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zñA-ZÑ0-9]|-|\.)+(\.[j]))/i,/^(?:[a-zA-Z_ñ]([a-zA-Z0-9_Ñ]*))/i,/^(?:(")([^\\"]|\\.)*("))/i,/^(?:(')([^\\']|\\n|\\t|\\r|\\|\\0)('))/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^\^)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:===)/i,/^(?:==)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?::=)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\$)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaJSharp;
exports.Parser = GramaticaJSharp.Parser;
exports.parse = function () { return GramaticaJSharp.parse.apply(GramaticaJSharp, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}