/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaJSharp = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,8],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[5,11,12,25,27,28,29,30,69,71,72],$Vb=[12,14,23],$Vc=[5,10,11,12,17,20,25,27,28,29,30,69,71,72],$Vd=[2,107],$Ve=[5,10,11,12,25,27,28,29,30,34,49,53,55,56,57,58,59,62,65,66,67,69,71,72],$Vf=[1,35],$Vg=[1,48],$Vh=[1,72],$Vi=[1,55],$Vj=[1,57],$Vk=[1,54],$Vl=[1,60],$Vm=[1,63],$Vn=[1,65],$Vo=[1,66],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,88],$Vv=[1,90],$Vw=[17,23],$Vx=[5,10,11,12,16,17,23,25,27,28,29,30,34,49,53,55,56,57,58,59,62,65,66,67,69,71,72],$Vy=[1,97],$Vz=[1,98],$VA=[1,99],$VB=[5,10,11,12,16,17,23,25,27,28,29,30,34,49,53,54,55,56,57,58,59,62,65,66,67,69,71,72,78,79,80],$VC=[1,112],$VD=[1,113],$VE=[1,114],$VF=[1,115],$VG=[1,116],$VH=[1,117],$VI=[5,10,11,12,16,17,23,25,27,28,29,30,34,49,53,54,55,56,57,58,59,62,65,66,67,69,71,72,78,79,80,84,85,86,87,88,89,90,91,92,93,94,95,96],$VJ=[2,138],$VK=[1,118],$VL=[1,119],$VM=[1,120],$VN=[1,122],$VO=[5,10,11,12,16,17,20,23,25,27,28,29,30,34,47,48,49,53,54,55,56,57,58,59,62,65,66,67,69,71,72,78,79,80,84,85,86,87,88,89,90,91,92,93,94,95,96,107],$VP=[2,156],$VQ=[1,125],$VR=[1,126],$VS=[1,137],$VT=[1,156],$VU=[1,164],$VV=[1,162],$VW=[1,163],$VX=[1,161],$VY=[1,160],$VZ=[1,159],$V_=[1,158],$V$=[1,157],$V01=[1,154],$V11=[17,34],$V21=[1,203],$V31=[5,11,12,25,27,28,29,30,34,49,53,55,56,57,58,59,62,65,66,67,69,71,72],$V41=[16,17],$V51=[5,11,12,25,27,28,29,30,34,49,53,55,56,57,58,59,62,64,65,66,67,69,71,72],$V61=[11,12,27,28,29,30,34,49,53,55,56,57,58,59,62,65,66,67,69,71,72],$V71=[1,227],$V81=[1,230],$V91=[10,11,12,27,28,29,30,34,49,53,55,56,57,58,59,62,65,66,67,69,71,72],$Va1=[5,10,11,12,16,17,23,25,27,28,29,30,34,49,53,54,55,56,57,58,59,62,65,66,67,69,71,72,78,79,80,84,85,86,87,88,89,90,91,92],$Vb1=[5,10,11,12,16,17,23,25,27,28,29,30,34,49,53,54,55,56,57,58,59,62,65,66,67,69,71,72,78,79,80,84,85,86,87,88,89,90,91,92,93,94,95],$Vc1=[1,254],$Vd1=[1,325],$Ve1=[1,326],$Vf1=[34,53,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"JS_BODY":4,"EOF":5,"JS_BODY_DEC":6,"METHOD_DEC":7,"STRC_DEC":8,"VAR_DEC":9,"PTCOMA":10,"RDEFINE":11,"ID":12,"RAS":13,"CORIZQ":14,"LISTA_ATRIB":15,"CORDER":16,"COMA":17,"ATRIB":18,"TYPE":19,"IGUAL":20,"VAR_INIT":21,"PARIZQ":22,"PARDER":23,"BLOCK_SENT":24,"RVOID":25,"L_PARAMS":26,"RINTEGER":27,"RDOUBLE":28,"RCHAR":29,"RBOOLEAN":30,"PARAM":31,"LLAVEIZQ":32,"L_SENT":33,"LLAVEDER":34,"SENT":35,"PRINT":36,"ASIGNACION":37,"WHILE":38,"DOWHILE":39,"IF":40,"FOR":41,"RETURN":42,"BREAK":43,"CONTINUE":44,"SWITCH":45,"L_ACCESO":46,"INCREMENTO":47,"DECREMENTO":48,"RSWITCH":49,"EXP":50,"L_CASOS":51,"CASO":52,"RCASE":53,"DOSPT":54,"RDEFAULT":55,"RBREAK":56,"RCONTINUE":57,"RRETURN":58,"RFOR":59,"FOR_INIT":60,"ACTUALIZACION":61,"RIF":62,"ELSE":63,"RELSE":64,"RDO":65,"RWHILE":66,"RPRINT":67,"L_ID":68,"RVAR":69,"DOSPTIGUAL":70,"RCONST":71,"RGLOBAL":72,"ARRAY_INIT":73,"LISTA_ARRAY":74,"LISTA_EXP":75,"ELEMENTO":76,"DOLAR":77,"AND":78,"OR":79,"XOR":80,"NOT":81,"EXPR":82,"EXP2":83,"MAYOR":84,"MENOR":85,"MAYORIGUAL":86,"MENORIGUAL":87,"IGUALQUE":88,"DIFERENTE":89,"IGUALREF":90,"MAS":91,"MENOS":92,"POR":93,"DIV":94,"MOD":95,"POT":96,"LITERAL":97,"INSTANCIA_STRC":98,"RNULL":99,"LIT_INTEGER":100,"LIT_CHAR":101,"LIT_DOUBLE":102,"LIT_STRING":103,"RTRUE":104,"RFALSE":105,"RSTRC":106,"PUNTO":107,"ACCESO":108,"ACCESO_ARREGLO":109,"CALL_METHOD":110,"L_PARAM2":111,"PARAM2":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"PTCOMA",11:"RDEFINE",12:"ID",13:"RAS",14:"CORIZQ",16:"CORDER",17:"COMA",20:"IGUAL",22:"PARIZQ",23:"PARDER",25:"RVOID",27:"RINTEGER",28:"RDOUBLE",29:"RCHAR",30:"RBOOLEAN",32:"LLAVEIZQ",34:"LLAVEDER",47:"INCREMENTO",48:"DECREMENTO",49:"RSWITCH",53:"RCASE",54:"DOSPT",55:"RDEFAULT",56:"RBREAK",57:"RCONTINUE",58:"RRETURN",59:"RFOR",62:"RIF",64:"RELSE",65:"RDO",66:"RWHILE",67:"RPRINT",69:"RVAR",70:"DOSPTIGUAL",71:"RCONST",72:"RGLOBAL",77:"DOLAR",78:"AND",79:"OR",80:"XOR",81:"NOT",84:"MAYOR",85:"MENOR",86:"MAYORIGUAL",87:"MENORIGUAL",88:"IGUALQUE",89:"DIFERENTE",90:"IGUALREF",91:"MAS",92:"MENOS",93:"POR",94:"DIV",95:"MOD",96:"POT",99:"RNULL",100:"LIT_INTEGER",101:"LIT_CHAR",102:"LIT_DOUBLE",103:"LIT_STRING",104:"RTRUE",105:"RFALSE",106:"RSTRC",107:"PUNTO"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[8,6],[8,5],[15,3],[15,1],[18,2],[18,2],[18,4],[18,4],[18,4],[18,4],[18,6],[18,6],[7,5],[7,5],[7,5],[7,6],[7,6],[7,6],[7,7],[7,7],[7,8],[7,8],[19,1],[19,1],[19,1],[19,1],[26,3],[26,1],[24,3],[24,2],[33,2],[33,1],[35,2],[35,1],[35,2],[35,1],[35,2],[35,1],[35,1],[35,2],[35,1],[35,1],[35,1],[35,1],[35,2],[35,1],[35,2],[35,1],[35,1],[35,1],[35,2],[35,3],[35,3],[35,2],[35,2],[45,7],[51,2],[51,1],[52,4],[52,3],[43,1],[44,1],[42,3],[42,2],[41,9],[41,7],[41,8],[41,8],[41,7],[41,7],[41,6],[61,1],[61,1],[60,1],[60,1],[40,5],[40,6],[63,2],[63,2],[39,6],[38,5],[37,3],[36,4],[31,2],[31,2],[31,4],[31,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,2],[9,2],[9,6],[9,6],[9,4],[9,4],[68,3],[68,1],[21,1],[21,1],[73,3],[74,3],[74,1],[75,3],[75,1],[76,1],[76,2],[50,3],[50,3],[50,3],[50,2],[50,4],[50,1],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,1],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,1],[83,2],[83,2],[83,2],[83,1],[83,1],[83,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[98,4],[98,5],[98,5],[46,3],[46,1],[108,1],[108,1],[108,1],[109,4],[110,4],[110,3],[110,4],[111,3],[111,1],[112,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; console.log($$[$0-1]);
break;
case 2: case 64:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$ = [$$[$0]];            
break;
case 4: case 5: case 41: case 43: case 45: case 46: case 48: case 49: case 50: case 51: case 53: case 55: case 56: case 57: case 79: case 80: case 81: case 82: case 108: case 109: case 115: case 122: case 130: case 142: case 143: case 157: case 158:
 this.$ = $$[$0]; 
break;
case 6:
 this.$ = $$[$0-1]; this.$.dec_interna = false; 
break;
case 7:
 this.$ = $$[$0]; this.$.dec_interna = false; 
break;
case 8:
 this.$ = new DefStruct($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 9:
 this.$ = new DefStruct($$[$0-3],[],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 10: case 34: case 106: case 111: case 113: case 154: case 163:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 11: case 35: case 39: case 65: case 107: case 112: case 114: case 155: case 164:
 this.$ = [$$[$0]]; 
break;
case 12: case 13:
 this.$ = new Atributo(new Tipo($$[$0-1],0),$$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 14: case 15:
 this.$ = new Atributo(new Tipo($$[$0-3],0),$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 16: case 17:
 this.$ = new Atributo(new Tipo($$[$0-3],1),$$[$0],null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 18: case 19:
 this.$ = new Atributo(new Tipo($$[$0-5],1),$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 20:
 this.$ = new DecFun(new Tipo($$[$0-4],0),$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 21:
 this.$ = new DecFun(new Tipo(VOID,0),$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 22:
 this.$ = new DecFun(new Tipo($$[$0-4],0),$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 23: case 25:
 this.$ = new DecFun(new Tipo($$[$0-5],0),$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 24:
 this.$ = new DecFun(new Tipo(VOID,0),$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 26: case 27:
 this.$ = new DecFun(new Tipo($$[$0-6],1),$$[$0-3],[],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 28: case 29:
 this.$ = new DecFun(new Tipo($$[$0-7],1),$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 30:
 this.$ = INT 
break;
case 31:
 this.$ = DOUBLE 
break;
case 32:
 this.$ = CHAR 
break;
case 33:
 this.$ = BOOL 
break;
case 36: case 40: case 42: case 44: case 47: case 52: case 54: case 137:
 this.$ = $$[$0-1]; 
break;
case 37:
 this.$ = []; 
break;
case 38:
 this.$ = $$[$0-1]; this.$.push($$[$0]) 
break;
case 58:
 this.$ = new Acceso($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 59:
 this.$ = new IncDec(new Acceso($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),1,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 60:
 this.$ = new IncDec(new Acceso($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),-1,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 61: case 139:
 this.$ = new IncDec(new Acceso($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),1,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 62: case 140:
 this.$ = new IncDec(new Acceso($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),-1,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 63:
 this.$ = new Switch($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 66:
 this.$ = new Caso($$[$0-2],$$[$0]); 
break;
case 67:
 this.$ = new Caso(null,$$[$0]); 
break;
case 68:
 this.$ = new Break(_$[$0].first_line,_$[$0].first_column); 
break;
case 69:
 this.$ = new Continue(_$[$0].first_line,_$[$0].first_column); 
break;
case 70:
 this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 71:
 this.$ = new Return(null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 72:
 this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column); 
break;
case 73:
 this.$ = new For($$[$0-4],null,null,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 74:
 this.$ = new For($$[$0-5],$$[$0-3],null,$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 75:
 this.$ = new For(null,$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 76:
 this.$ = new For(null,null,$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 77:
 this.$ = new For(null,$$[$0-3],null,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 78:
 this.$ = new For(null,null,null,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 83:
 this.$ = new IF($$[$0-2],$$[$0],null,_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 84:
 this.$ = new IF($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 85:
 this.$ = new Else(null,$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 86:
 this.$ = new Else($$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 87:
 this.$ = new DoWhile($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 88:
 this.$ = new While($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 89:
 this.$ = new Asignacion(new Acceso($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 90:
 this.$ = new Print($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 91: case 92:
 this.$ = new ParametroFormal(new Tipo($$[$0-1],0),$$[$0]); 
break;
case 93:
 this.$ = new ParametroFormal(new Tipo($$[$0-3],1),$$[$0]); 
break;
case 94:
 this.$ = new ParametroFormal(new Tipo($$[$0-3],1),$$[$0])  
break;
case 95:
 this.$ = new DeclaracionJ(new Tipo($$[$0-3],0),$$[$0-2],false,false,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);  
break;
case 96:
 this.$ = new DeclaracionJ(new Tipo($$[$0-3],0),$$[$0-2],false,false,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);        
break;
case 97:
 this.$ = new DeclaracionJ(new Tipo('$VAR',0),[$$[$0-2]],false,false,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);  
break;
case 98:
 this.$ = new DeclaracionJ(null,[$$[$0-2]],true,false,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);     
break;
case 99:
 this.$ = new DeclaracionJ(null,[$$[$0-2]],false,true,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);     
break;
case 100: case 101:
 this.$ = new DeclaracionJ(new Tipo($$[$0-1],0),$$[$0],false,false,null,_$[$0-1].first_line,_$[$0-1].first_column);      
break;
case 102: case 103:
 this.$ = new DeclaracionJ(new Tipo($$[$0-5],1),$$[$0-2],false,false,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 104: case 105:
 this.$ = new DeclaracionJ(new Tipo($$[$0-3],1),$$[$0],false,false,null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 110:
 this.$ = new ArrayInit($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 116:
 this.$ = new Dolar(new Acceso($$[$0],_$[$0-1].first_line,_$[$0-1].first_column),_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 117:
 this.$ = new OpeLogica(TipoOpeJ.AND,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 118:
 this.$ = new OpeLogica(TipoOpeJ.OR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 119:
 this.$ = new OpeLogica(TipoOpeJ.XOR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 120:
 this.$ = new OpeLogica(TipoOpeJ.NOT,$$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 121:
 this.$ = new CasteoExplicito(new Tipo($$[$0-2],0),$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 123:
 this.$ = new OpeRel(TipoOpeJ.MAYOR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 124:
 this.$ = new OpeRel(TipoOpeJ.MENOR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 125:
 this.$ = new OpeRel(TipoOpeJ.MAYORIGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 126:
 this.$ = new OpeRel(TipoOpeJ.MENORIGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 127:
 this.$ = new OpeRel(TipoOpeJ.IGUALQUE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 128:
 this.$ = new OpeRel(TipoOpeJ.DIFERENTE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 129:
 this.$ = new OpeRel(TipoOpeJ.IGUALREF,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 131:
 this.$ = new OpeArit(TipoOpeJ.SUMA,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 132:
 this.$ = new OpeArit(TipoOpeJ.RESTA,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 133:
 this.$ = new OpeArit(TipoOpeJ.MULT,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 134:
 this.$ = new OpeArit(TipoOpeJ.DIV,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 135:
 this.$ = new OpeArit(TipoOpeJ.MOD,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 136:
 this.$ = new OpeArit(TipoOpeJ.POT,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 138:
 this.$ = new Acceso($$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
case 141:
 this.$ = new OpeArit(TipoOpeJ.NEGATIVO,$$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 144:
 this.$ = new Null(_$[$0].first_line,_$[$0].first_column); 
break;
case 145:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_INT,_$[$0].first_line,_$[$0].first_column);      
break;
case 146:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_CHAR,_$[$0].first_line,_$[$0].first_column);     
break;
case 147:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_DOUBLE,_$[$0].first_line,_$[$0].first_column);   
break;
case 148:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_STRING,_$[$0].first_line,_$[$0].first_column);   
break;
case 149:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_TRUE,_$[$0].first_line,_$[$0].first_column);     
break;
case 150:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_FALSE,_$[$0].first_line,_$[$0].first_column);    
break;
case 151:
 this.$ = new StrcStruct($$[$0-2],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 152: case 153:
 this.$ = new StrcArray(new Tipo($$[$0-3],1),$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 156:
 this.$ = new Identificador($$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
case 159:
 this.$ = new AccesoArray($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 160:
 this.$ = new CallFun($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 161:
 this.$ = new CallFun($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 162:
 this.$ = new CallFun2($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 165:
 this.$ = new ParamT2($$[$0-2],$$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,11:$V0,12:$V1,19:7,25:$V2,27:$V3,28:$V4,29:$V5,30:$V6,69:$V7,71:$V8,72:$V9},{1:[3]},{5:[1,18],6:19,7:4,8:5,9:6,11:$V0,12:$V1,19:7,25:$V2,27:$V3,28:$V4,29:$V5,30:$V6,69:$V7,71:$V8,72:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,7],{10:[1,20]}),{12:[1,21],14:[1,22],68:23},{12:[1,24]},{12:[1,25],14:[1,26],68:27},{12:[1,28]},{12:[1,29]},{12:[1,30]},{12:[1,31]},o($Vb,[2,30]),o($Vb,[2,31]),o($Vb,[2,32]),o($Vb,[2,33]),{1:[2,1]},o($Va,[2,2]),o($Va,[2,6]),o($Vc,$Vd,{22:[1,32]}),{16:[1,33]},o($Ve,[2,100],{17:$Vf,20:[1,34]}),{22:[1,36]},o($Vc,$Vd,{22:[1,37]}),{16:[1,38]},o($Ve,[2,101],{17:$Vf,20:[1,39]}),{13:[1,40]},{70:[1,41]},{70:[1,42]},{70:[1,43]},{12:$Vg,19:47,23:[1,44],26:45,27:$V3,28:$V4,29:$V5,30:$V6,31:46},{12:[1,49],68:50},{12:$Vh,21:51,22:$Vi,32:$Vj,46:59,50:52,73:53,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:[1,75]},{12:$Vg,19:47,23:[1,76],26:77,27:$V3,28:$V4,29:$V5,30:$V6,31:46},{12:$Vg,19:47,23:[1,78],26:79,27:$V3,28:$V4,29:$V5,30:$V6,31:46},{12:[1,80],68:81},{12:$Vh,21:82,22:$Vi,32:$Vj,46:59,50:52,73:53,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{14:[1,83]},{12:$Vh,21:84,22:$Vi,32:$Vj,46:59,50:52,73:53,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,21:85,22:$Vi,32:$Vj,46:59,50:52,73:53,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,21:86,22:$Vi,32:$Vj,46:59,50:52,73:53,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{24:87,32:$Vu},{17:$Vv,23:[1,89]},o($Vw,[2,35]),{12:[1,91],14:[1,92]},{12:[1,93],14:[1,94]},o($Vc,$Vd,{22:[1,95]}),o($Ve,[2,104],{17:$Vf,20:[1,96]}),o($Ve,[2,95]),o($Vx,[2,108],{78:$Vy,79:$Vz,80:$VA}),o($Vx,[2,109]),{12:$Vh,22:$Vi,46:59,50:100,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,19:101,22:$Vi,27:$V3,28:$V4,29:$V5,30:$V6,46:59,50:102,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},o($VB,[2,122]),{12:$Vh,22:$Vi,46:59,50:104,74:103,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},o($VB,[2,130],{84:[1,105],85:[1,106],86:[1,107],87:[1,108],88:[1,109],89:[1,110],90:[1,111],91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH}),o($VI,$VJ,{47:$VK,48:$VL,107:$VM}),{12:$Vh,22:$VN,46:59,83:121,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},o($VI,[2,142]),o($VI,[2,143]),o($VI,[2,144]),o($VO,[2,155]),o($VI,[2,145]),o($VI,[2,146]),o($VI,[2,147]),o($VI,[2,148]),o($VI,[2,149]),o($VI,[2,150]),{12:[1,123],19:124,27:$V3,28:$V4,29:$V5,30:$V6},o($VO,$VP,{14:$VQ,22:$VR}),o($VO,[2,157]),o($VO,[2,158]),o([5,10,11,12,17,20,25,27,28,29,30,34,49,53,55,56,57,58,59,62,65,66,67,69,71,72],[2,106]),{24:127,32:$Vu},{17:$Vv,23:[1,128]},{24:129,32:$Vu},{17:$Vv,23:[1,130]},o($Vc,$Vd,{22:[1,131]}),o($Ve,[2,105],{17:$Vf,20:[1,132]}),o($Ve,[2,96]),{12:$VS,15:133,16:[1,134],18:135,19:136,27:$V3,28:$V4,29:$V5,30:$V6},o($Ve,[2,97]),o($Ve,[2,98]),o($Ve,[2,99]),o($Va,[2,20]),{8:151,9:142,11:$V0,12:$VT,19:155,27:$V3,28:$V4,29:$V5,30:$V6,33:138,34:[1,139],35:140,36:141,37:143,38:144,39:145,40:146,41:147,42:148,43:149,44:150,45:152,46:153,49:$VU,56:$VV,57:$VW,58:$VX,59:$VY,62:$VZ,65:$V_,66:$V$,67:$V01,69:$V7,71:$V8,72:$V9,108:64,109:73,110:74},{24:165,32:$Vu},{12:$Vg,19:47,27:$V3,28:$V4,29:$V5,30:$V6,31:166},o($Vw,[2,91]),{16:[1,167]},o($Vw,[2,92]),{16:[1,168]},{12:$Vg,19:47,23:[1,169],26:170,27:$V3,28:$V4,29:$V5,30:$V6,31:46},{12:$Vh,21:171,22:$Vi,32:$Vj,46:59,50:52,73:53,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$Vi,46:59,50:172,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$Vi,46:59,50:173,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$Vi,46:59,50:174,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},o($VB,[2,120]),{23:[1,175]},{23:[1,176],78:$Vy,79:$Vz,80:$VA},{17:[1,178],34:[1,177]},o($V11,[2,112],{78:$Vy,79:$Vz,80:$VA}),{12:$Vh,22:$VN,46:59,83:179,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$VN,46:59,83:180,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$VN,46:59,83:181,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$VN,46:59,83:182,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$VN,46:59,83:183,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$VN,46:59,83:184,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$VN,46:59,83:185,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$VN,46:59,83:186,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$VN,46:59,83:187,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$VN,46:59,83:188,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$VN,46:59,83:189,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$VN,46:59,83:190,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$VN,46:59,83:191,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},o($VI,[2,139]),o($VI,[2,140]),{12:$Vh,108:192,109:73,110:74},o($VI,[2,141]),{12:$Vh,22:$Vi,46:59,50:102,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{14:[1,194],22:[1,193]},{14:[1,195]},{12:$Vh,22:$Vi,46:59,50:196,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:[1,204],21:202,22:$Vi,23:[1,198],32:$Vj,46:59,50:52,73:53,75:197,76:200,77:$V21,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74,111:199,112:201},o($Va,[2,21]),{24:205,32:$Vu},o($Va,[2,22]),{24:206,32:$Vu},{12:$Vg,19:47,23:[1,207],26:208,27:$V3,28:$V4,29:$V5,30:$V6,31:46},{12:$Vh,21:209,22:$Vi,32:$Vj,46:59,50:52,73:53,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{16:[1,210],17:[1,211]},o($V31,[2,9]),o($V41,[2,11]),{12:[1,212],14:[1,213]},{12:[1,214],14:[1,215]},{8:151,9:142,11:$V0,12:$VT,19:155,27:$V3,28:$V4,29:$V5,30:$V6,34:[1,216],35:217,36:141,37:143,38:144,39:145,40:146,41:147,42:148,43:149,44:150,45:152,46:153,49:$VU,56:$VV,57:$VW,58:$VX,59:$VY,62:$VZ,65:$V_,66:$V$,67:$V01,69:$V7,71:$V8,72:$V9,108:64,109:73,110:74},o($V51,[2,37]),o($V61,[2,39]),o($V61,[2,41],{10:[1,218]}),o($V61,[2,43],{10:[1,219]}),o($V61,[2,45],{10:[1,220]}),o($V61,[2,46]),o($V61,[2,48],{10:[1,221]}),o($V61,[2,49]),o($V61,[2,50]),o($V61,[2,51]),o($V61,[2,53],{10:[1,222]}),o($V61,[2,55],{10:[1,223]}),o($V61,[2,56]),o($V61,[2,57]),{10:[1,224],20:$V71,47:[1,225],48:[1,226],107:$VM},{22:[1,228]},{12:$V81,14:[1,229],68:23},o([10,20,47,48,107],$VP,{68:27,12:$V81,14:[1,231],22:$VR}),{22:[1,232]},{24:233,32:$Vu},{22:[1,234]},{22:[1,235]},{10:[1,237],12:$Vh,22:$Vi,46:59,50:236,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},o($V91,[2,68]),o($V91,[2,69]),{22:[1,238]},o($Va,[2,23]),o($Vw,[2,34]),{12:[1,239]},{12:[1,240]},{24:241,32:$Vu},{17:$Vv,23:[1,242]},o($Ve,[2,102]),o($VB,[2,117]),o([5,10,11,12,16,17,23,25,27,28,29,30,34,49,53,54,55,56,57,58,59,62,65,66,67,69,71,72,79],[2,118],{78:$Vy,80:$VA}),o([5,10,11,12,16,17,23,25,27,28,29,30,34,49,53,54,55,56,57,58,59,62,65,66,67,69,71,72,79,80],[2,119],{78:$Vy}),{12:$Vh,22:$Vi,46:59,50:243,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},o($VI,[2,137]),o($Vx,[2,110]),{12:$Vh,22:$Vi,46:59,50:244,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},o($VB,[2,123],{91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH}),o($VB,[2,124],{91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH}),o($VB,[2,125],{91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH}),o($VB,[2,126],{91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH}),o($VB,[2,127],{91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH}),o($VB,[2,128],{91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH}),o($VB,[2,129],{91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH}),o($Va1,[2,131],{93:$VE,94:$VF,95:$VG,96:$VH}),o($Va1,[2,132],{93:$VE,94:$VF,95:$VG,96:$VH}),o($Vb1,[2,133],{96:$VH}),o($Vb1,[2,134],{96:$VH}),o($Vb1,[2,135],{96:$VH}),o($VI,[2,136]),o($VO,[2,154]),{23:[1,245]},{12:$Vh,22:$Vi,46:59,50:246,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$Vi,46:59,50:247,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{16:[1,248],78:$Vy,79:$Vz,80:$VA},{17:[1,250],23:[1,249]},o($VO,[2,161]),{17:[1,252],23:[1,251]},o($Vw,[2,114]),o($Vw,[2,164]),o($Vw,[2,115]),{12:$Vh,46:253,108:64,109:73,110:74},o([17,23,47,48,78,79,80,84,85,86,87,88,89,90,91,92,93,94,95,96,107],$VP,{14:$VQ,20:$Vc1,22:$VR}),o($Va,[2,24]),o($Va,[2,25]),{24:255,32:$Vu},{17:$Vv,23:[1,256]},o($Ve,[2,103]),o($V31,[2,8]),{12:$VS,18:257,19:136,27:$V3,28:$V4,29:$V5,30:$V6},o($V41,[2,12],{20:[1,258]}),{16:[1,259]},o($V41,[2,13],{20:[1,260]}),{16:[1,261]},o($V51,[2,36]),o($V61,[2,38]),o($V61,[2,40]),o($V61,[2,42]),o($V61,[2,44]),o($V61,[2,47]),o($V61,[2,52]),o($V61,[2,54]),o($V61,[2,58]),o($V61,[2,61],{10:[1,262]}),o($V61,[2,62],{10:[1,263]}),{12:$Vh,21:264,22:$Vi,32:$Vj,46:59,50:52,73:53,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$Vi,46:59,50:265,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{16:[1,266]},o([10,11,12,17,20,27,28,29,30,34,49,53,55,56,57,58,59,62,65,66,67,69,71,72],$Vd),{12:$Vh,16:[1,267],22:$Vi,46:59,50:196,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,22:$Vi,46:59,50:268,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{66:[1,269]},{12:$Vh,22:$Vi,46:59,50:270,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{9:273,10:[1,272],12:$VT,19:155,27:$V3,28:$V4,29:$V5,30:$V6,37:274,46:275,60:271,69:$V7,71:$V8,72:$V9,108:64,109:73,110:74},{10:[1,276],78:$Vy,79:$Vz,80:$VA},o($V61,[2,71]),{12:$Vh,22:$Vi,46:59,50:277,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},o($Vw,[2,93]),o($Vw,[2,94]),o($Va,[2,26]),{24:278,32:$Vu},o([5,10,11,12,16,17,23,25,27,28,29,30,34,49,53,54,55,56,57,58,59,62,65,66,67,69,71,72],[2,121],{78:$Vy,79:$Vz,80:$VA}),o($V11,[2,111],{78:$Vy,79:$Vz,80:$VA}),o($VI,[2,151]),{16:[1,279],78:$Vy,79:$Vz,80:$VA},{16:[1,280],78:$Vy,79:$Vz,80:$VA},o($VO,[2,159]),o($VO,[2,160]),{12:$Vh,21:202,22:$Vi,32:$Vj,46:59,50:52,73:53,76:281,77:$V21,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},o($VO,[2,162]),{12:[1,283],112:282},o($Vw,[2,116],{107:$VM}),{12:$Vh,21:284,22:$Vi,32:$Vj,46:59,50:52,73:53,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},o($Va,[2,27]),{24:285,32:$Vu},o($V41,[2,10]),{12:$Vh,21:286,22:$Vi,32:$Vj,46:59,50:52,73:53,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:[1,287]},{12:$Vh,21:288,22:$Vi,32:$Vj,46:59,50:52,73:53,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:[1,289]},o($V61,[2,59]),o($V61,[2,60]),o([10,11,12,23,27,28,29,30,34,49,53,55,56,57,58,59,62,65,66,67,69,71,72],[2,89]),{23:[1,290],78:$Vy,79:$Vz,80:$VA},{12:$V81,68:50},{12:$V81,68:81},{23:[1,291],78:$Vy,79:$Vz,80:$VA},{22:[1,292]},{23:[1,293],78:$Vy,79:$Vz,80:$VA},{10:[1,294]},{10:[1,296],12:$Vh,22:$Vi,46:59,50:295,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{10:[2,81]},{10:[2,82]},{20:$V71,107:$VM},o($V61,[2,70]),{23:[1,297],78:$Vy,79:$Vz,80:$VA},o($Va,[2,28]),o($VI,[2,152]),o($VI,[2,153]),o($Vw,[2,113]),o($Vw,[2,163]),{20:$Vc1},o($Vw,[2,165]),o($Va,[2,29]),o($V41,[2,14]),o($V41,[2,16],{20:[1,298]}),o($V41,[2,15]),o($V41,[2,17],{20:[1,299]}),o($V91,[2,90]),{24:300,32:$Vu},{12:$Vh,22:$Vi,46:59,50:301,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{24:302,32:$Vu},{10:[1,304],12:$Vh,22:$Vi,46:59,50:303,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{10:[1,305],78:$Vy,79:$Vz,80:$VA},{12:$Vh,22:$Vi,23:[1,307],37:309,46:310,50:308,61:306,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{32:[1,311]},{12:$Vh,21:312,22:$Vi,32:$Vj,46:59,50:52,73:53,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{12:$Vh,21:313,22:$Vi,32:$Vj,46:59,50:52,73:53,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},o($V61,[2,88]),{23:[1,314],78:$Vy,79:$Vz,80:$VA},o($V61,[2,83],{63:315,64:[1,316]}),{10:[1,317],78:$Vy,79:$Vz,80:$VA},{23:[1,318]},{12:$Vh,22:$Vi,23:[1,320],37:309,46:310,50:308,61:319,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{23:[1,321]},{24:322,32:$Vu},{23:[2,79],78:$Vy,79:$Vz,80:$VA},{23:[2,80]},o([23,78,79,80,84,85,86,87,88,89,90,91,92,93,94,95,96],$VJ,{20:$V71,47:$VK,48:$VL,107:$VM}),{51:323,52:324,53:$Vd1,55:$Ve1},o($V41,[2,18]),o($V41,[2,19]),o($V91,[2,87]),o($V61,[2,84]),{24:328,32:$Vu,40:327,62:$VZ},{12:$Vh,22:$Vi,23:[1,330],37:309,46:310,50:308,61:329,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{24:331,32:$Vu},{23:[1,332]},{24:333,32:$Vu},{24:334,32:$Vu},o($V61,[2,78]),{34:[1,335],52:336,53:$Vd1,55:$Ve1},o($Vf1,[2,65]),{12:$Vh,22:$Vi,46:59,50:337,81:$Vk,82:56,83:58,92:$Vl,97:61,98:62,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,108:64,109:73,110:74},{54:[1,338]},o($V61,[2,85]),o($V61,[2,86]),{23:[1,339]},{24:340,32:$Vu},o($V61,[2,73]),{24:341,32:$Vu},o($V61,[2,77]),o($V61,[2,76]),o($V61,[2,63]),o($Vf1,[2,64]),{54:[1,342],78:$Vy,79:$Vz,80:$VA},{8:151,9:142,11:$V0,12:$VT,19:155,27:$V3,28:$V4,29:$V5,30:$V6,33:343,35:140,36:141,37:143,38:144,39:145,40:146,41:147,42:148,43:149,44:150,45:152,46:153,49:$VU,56:$VV,57:$VW,58:$VX,59:$VY,62:$VZ,65:$V_,66:$V$,67:$V01,69:$V7,71:$V8,72:$V9,108:64,109:73,110:74},{24:344,32:$Vu},o($V61,[2,74]),o($V61,[2,75]),{8:151,9:142,11:$V0,12:$VT,19:155,27:$V3,28:$V4,29:$V5,30:$V6,33:345,35:140,36:141,37:143,38:144,39:145,40:146,41:147,42:148,43:149,44:150,45:152,46:153,49:$VU,56:$VV,57:$VW,58:$VX,59:$VY,62:$VZ,65:$V_,66:$V$,67:$V01,69:$V7,71:$V8,72:$V9,108:64,109:73,110:74},o($Vf1,[2,67],{108:64,109:73,110:74,36:141,9:142,37:143,38:144,39:145,40:146,41:147,42:148,43:149,44:150,8:151,45:152,46:153,19:155,35:217,11:$V0,12:$VT,27:$V3,28:$V4,29:$V5,30:$V6,49:$VU,56:$VV,57:$VW,58:$VX,59:$VY,62:$VZ,65:$V_,66:$V$,67:$V01,69:$V7,71:$V8,72:$V9}),o($V61,[2,72]),o($Vf1,[2,66],{108:64,109:73,110:74,36:141,9:142,37:143,38:144,39:145,40:146,41:147,42:148,43:149,44:150,8:151,45:152,46:153,19:155,35:217,11:$V0,12:$VT,27:$V3,28:$V4,29:$V5,30:$V6,49:$VU,56:$VV,57:$VW,58:$VX,59:$VY,62:$VZ,65:$V_,66:$V$,67:$V01,69:$V7,71:$V8,72:$V9})],
defaultActions: {18:[2,1],273:[2,81],274:[2,82],309:[2,80]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var DeclaracionJ = require('../app/Compilador/InstruccionJ/DeclaracionJ').DeclaracionJ;
    var For = require('../app/Compilador/InstruccionJ/For').For;
    var Break = require('../app/Compilador/InstruccionJ/Break').Break;
    var Continue = require('../app/Compilador/InstruccionJ/Continue').Continue;
    var DefStruct = require('../app/Compilador/InstruccionJ/DefStruct').DefStruct;
    var Atributo = require('../app/Compilador/InstruccionJ/DefStruct').Atributo;
    var Return = require('../app/Compilador/InstruccionJ/Return').Return;
    var Asignacion = require('../app/Compilador/InstruccionJ/Asignacion').Asignacion;
    var Else = require('../app/Compilador/InstruccionJ/Else').Else;
    var IF = require('../app/Compilador/InstruccionJ/IF').IF;
    var DoWhile = require('../app/Compilador/InstruccionJ/DoWhile').DoWhile;
    var While = require('../app/Compilador/InstruccionJ/While').While;
    var Print = require('../app/Compilador/InstruccionJ/Print').Print;
    var DecFun = require('../app/Compilador/InstruccionJ/DecFun').DecFun;
    var Switch = require('../app/Compilador/InstruccionJ/Switch').Switch;
    var Caso = require('../app/Compilador/InstruccionJ/Switch').Caso;

    var LiteralJ = require('../app/Compilador/ExpresionJ/LiteralJ').LiteralJ;
    var Identificador = require('../app/Compilador/ExpresionJ/Identificador').Identificador;
    var Acceso = require('../app/Compilador/ExpresionJ/Acceso').Acceso;
    var AccesoArray = require('../app/Compilador/ExpresionJ/AccesoArray').AccesoArray;
    var IncDec = require('../app/Compilador/ExpresionJ/IncDec').IncDec;
    var Dolar = require('../app/Compilador/ExpresionJ/Dolar').Dolar;
    var CasteoExplicito = require('../app/Compilador/ExpresionJ/CasteoExplicito').CasteoExplicito;
    var TipoLit = require('../app/Compilador/ExpresionJ/LiteralJ').TipoLit;
    var Null = require('../app/Compilador/ExpresionJ/Null').Null;
    var CallFun = require('../app/Compilador/ExpresionJ/CallFun').CallFun;
    var ArrayInit = require('../app/Compilador/ExpresionJ/ArrayInit').ArrayInit;
    var CallFun2 = require('../app/Compilador/ExpresionJ/CallFun2').CallFun2;
    var ParamT2 = require('../app/Compilador/ExpresionJ/CallFun2').ParamT2;
    var TipoOpeJ = require('../app/Compilador/ExpresionJ/OperacionesJ/OperacionJ').TipoOpeJ;
    var StrcArray = require('../app/Compilador/ExpresionJ/STRC/StrcArray').StrcArray;
    var StrcStruct = require('../app/Compilador/ExpresionJ/STRC/StrcStruct').StrcStruct;
    var OpeArit = require('../app/Compilador/ExpresionJ/OperacionesJ/OpeArit').OpeArit;
    var OpeRel = require('../app/Compilador/ExpresionJ/OperacionesJ/OpeRel').OpeRel;
    var OpeLogica = require('../app/Compilador/ExpresionJ/OperacionesJ/OpeLogica').OpeLogica;
    var Tipo = require('../app/Compilador/TSJ/Tipo').Tipo;

    var DOUBLE = require('../app/Compilador/TSJ/Tipo').DOUBLE;
    var BOOL = require('../app/Compilador/TSJ/Tipo').BOOL;
    var STRING = require('../app/Compilador/TSJ/Tipo').STRING;
    var INT = require('../app/Compilador/TSJ/Tipo').INT;
    var CHAR = require('../app/Compilador/TSJ/Tipo').CHAR;
    var NULL = require('../app/Compilador/TSJ/Tipo').NULL;
    var VOID = require('../app/Compilador/TSJ/Tipo').VOID;



    var ParametroFormal = require('../app/Compilador/TSJ/ParametroFormal').ParametroFormal;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content */
break;
case 4:/* skip whitespace */
break;
case 5:return  'RNULL'
break;
case 6:return  'RINTEGER'
break;
case 7:return  'RDOUBLE'
break;
case 8:return  'RCHAR'
break;
case 9:return  'RBOOLEAN'
break;
case 10:return  'RIMPORT'
break;
case 11:return  'RVAR'
break;
case 12:return  'RCONST'
break;
case 13:return  'RGLOBAL'
break;
case 14:return  'RTRUE'
break;
case 15:return  'RFALSE'
break;
case 16:return  'RIF'
break;
case 17:return  'RELSE'
break;
case 18:return  'RSWITCH'
break;
case 19:return  'RCASE'
break;
case 20:return  'RDEFAULT'
break;
case 21:return  'RBREAK'
break;
case 22:return  'RCONTINUE'
break;
case 23:return  'RRETURN'
break;
case 24:return  'RPRINT'
break;
case 25:return  'RPUBLIC'
break;
case 26:return  'RPRIVATE'
break;
case 27:return  'RVOID'
break;
case 28:return  'RFOR'
break;
case 29:return  'RWHILE'
break;
case 30:return  'RDEFINE'
break;
case 31:return  'RAS'
break;
case 32:return  'RSTRC'
break;
case 33:return  'RDO'
break;
case 34:return  'RTRY'
break;
case 35:return  'RCATCH'
break;
case 36:return  'RTHROW'
break;
case 37:return  'LIT_DOUBLE'
break;
case 38:return  'LIT_INTEGER'
break;
case 39:return  'ID'
break;
case 40:return  'LIT_STRING'
break;
case 41:return  'LIT_CHAR'
break;
case 42:return  'INCREMENTO'
break;
case 43:return  'DECREMENTO'
break;
case 44:return  'POR'
break;
case 45:return  'DIV'
break;
case 46:return  'MENOS'
break;
case 47:return  'MAS'
break;
case 48:return  'POT'
break;
case 49:return  'MOD'
break;
case 50:return  'MAYORIGUAL'
break;
case 51:return  'MENORIGUAL'
break;
case 52:return  'IGUALREF'
break;
case 53:return  'IGUALQUE'
break;
case 54:return  'MENOR'
break;
case 55:return  'MAYOR'
break;
case 56:return  'DIFERENTE'
break;
case 57:return  'IGUAL'
break;
case 58:return  'AND'
break;
case 59:return  'OR'
break;
case 60:return  'NOT'
break;
case 61:return  'XOR'
break;
case 62:return  'TERNARIO'
break;
case 63:return  'PARIZQ'
break;
case 64:return  'PARDER'
break;
case 65:return  'CORIZQ'
break;
case 66:return  'CORDER'
break;
case 67:return  'LLAVEIZQ'
break;
case 68:return  'LLAVEDER'
break;
case 69:return  'DOSPTIGUAL'
break;
case 70:return  'IGUAL'
break;
case 71:return  'PTCOMA'
break;
case 72:return  'DOSPT'
break;
case 73:return  'COMA'
break;
case 74:return  'PUNTO'
break;
case 75:return  'DOLAR'
break;
case 76:return  'EOF'
break;
case 77:return  'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:import\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:public\b)/i,/^(?:private\b)/i,/^(?:void\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:do\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:[a-zA-Z_ñ]([a-zA-Z0-9_Ñ]*))/i,/^(?:(")([^\\"]|\\.)*("))/i,/^(?:(')([^\\']|\\n|\\t|\\r|\\|\\0)('))/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^\^)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:===)/i,/^(?:==)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?::=)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\$)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaJSharp;
exports.Parser = GramaticaJSharp.Parser;
exports.parse = function () { return GramaticaJSharp.parse.apply(GramaticaJSharp, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}