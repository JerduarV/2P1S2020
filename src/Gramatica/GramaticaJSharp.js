/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaJSharp = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,8],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[5,11,12,25,27,28,29,30,62,64,65],$Vb=[12,14,23],$Vc=[5,10,11,12,17,20,25,27,28,29,30,62,64,65],$Vd=[2,100],$Ve=[5,10,11,12,25,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65],$Vf=[1,35],$Vg=[1,48],$Vh=[1,71],$Vi=[1,55],$Vj=[1,57],$Vk=[1,54],$Vl=[1,60],$Vm=[1,64],$Vn=[1,65],$Vo=[1,66],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,87],$Vu=[1,89],$Vv=[17,23],$Vw=[5,10,11,12,16,17,23,25,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65],$Vx=[1,96],$Vy=[1,97],$Vz=[1,98],$VA=[5,10,11,12,16,17,23,25,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65,68,69,70],$VB=[1,111],$VC=[1,112],$VD=[1,113],$VE=[1,114],$VF=[1,115],$VG=[1,116],$VH=[5,10,11,12,16,17,23,25,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65,68,69,70,74,75,76,77,78,79,80,81,82,83,84,85,86],$VI=[2,127],$VJ=[1,117],$VK=[1,118],$VL=[1,119],$VM=[1,121],$VN=[5,10,11,12,16,17,20,23,25,27,28,29,30,34,46,47,48,49,50,52,55,58,59,60,62,64,65,68,69,70,74,75,76,77,78,79,80,81,82,83,84,85,86,96],$VO=[2,144],$VP=[1,125],$VQ=[1,136],$VR=[1,154],$VS=[1,160],$VT=[1,161],$VU=[1,159],$VV=[1,158],$VW=[1,157],$VX=[1,156],$VY=[1,155],$VZ=[1,152],$V_=[1,175],$V$=[17,23,34],$V01=[5,11,12,25,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65],$V11=[16,17],$V21=[5,11,12,25,27,28,29,30,34,48,49,50,52,55,57,58,59,60,62,64,65],$V31=[11,12,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65],$V41=[1,216],$V51=[1,219],$V61=[10,11,12,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65],$V71=[5,10,11,12,16,17,23,25,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65,68,69,70,74,75,76,77,78,79,80,81,82],$V81=[5,10,11,12,16,17,23,25,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65,68,69,70,74,75,76,77,78,79,80,81,82,83,84,85];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"JS_BODY":4,"EOF":5,"JS_BODY_DEC":6,"METHOD_DEC":7,"STRC_DEC":8,"VAR_DEC":9,"PTCOMA":10,"RDEFINE":11,"ID":12,"RAS":13,"CORIZQ":14,"LISTA_ATRIB":15,"CORDER":16,"COMA":17,"ATRIB":18,"TYPE":19,"IGUAL":20,"VAR_INIT":21,"PARIZQ":22,"PARDER":23,"BLOCK_SENT":24,"RVOID":25,"L_PARAMS":26,"RINTEGER":27,"RDOUBLE":28,"RCHAR":29,"RBOOLEAN":30,"PARAM":31,"LLAVEIZQ":32,"L_SENT":33,"LLAVEDER":34,"SENT":35,"PRINT":36,"ASIGNACION":37,"WHILE":38,"DOWHILE":39,"IF":40,"FOR":41,"RETURN":42,"BREAK":43,"CONTINUE":44,"L_ACCESO":45,"INCREMENTO":46,"DECREMENTO":47,"RBREAK":48,"RCONTINUE":49,"RRETURN":50,"EXP":51,"RFOR":52,"FOR_INIT":53,"ACTUALIZACION":54,"RIF":55,"ELSE":56,"RELSE":57,"RDO":58,"RWHILE":59,"RPRINT":60,"L_ID":61,"RVAR":62,"DOSPTIGUAL":63,"RCONST":64,"RGLOBAL":65,"ARRAY_INIT":66,"LISTA_EXP":67,"AND":68,"OR":69,"XOR":70,"NOT":71,"EXPR":72,"EXP2":73,"MAYOR":74,"MENOR":75,"MAYORIGUAL":76,"MENORIGUAL":77,"IGUALQUE":78,"DIFERENTE":79,"IGUALREF":80,"MAS":81,"MENOS":82,"POR":83,"DIV":84,"MOD":85,"POT":86,"LITERAL":87,"INSTANCIA_STRC":88,"LIT_INTEGER":89,"LIT_CHAR":90,"LIT_DOUBLE":91,"LIT_STRING":92,"RTRUE":93,"RFALSE":94,"RSTRC":95,"PUNTO":96,"ACCESO":97,"ACCESO_ARREGLO":98,"CALL_METHOD":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"PTCOMA",11:"RDEFINE",12:"ID",13:"RAS",14:"CORIZQ",16:"CORDER",17:"COMA",20:"IGUAL",22:"PARIZQ",23:"PARDER",25:"RVOID",27:"RINTEGER",28:"RDOUBLE",29:"RCHAR",30:"RBOOLEAN",32:"LLAVEIZQ",34:"LLAVEDER",46:"INCREMENTO",47:"DECREMENTO",48:"RBREAK",49:"RCONTINUE",50:"RRETURN",52:"RFOR",55:"RIF",57:"RELSE",58:"RDO",59:"RWHILE",60:"RPRINT",62:"RVAR",63:"DOSPTIGUAL",64:"RCONST",65:"RGLOBAL",68:"AND",69:"OR",70:"XOR",71:"NOT",74:"MAYOR",75:"MENOR",76:"MAYORIGUAL",77:"MENORIGUAL",78:"IGUALQUE",79:"DIFERENTE",80:"IGUALREF",81:"MAS",82:"MENOS",83:"POR",84:"DIV",85:"MOD",86:"POT",89:"LIT_INTEGER",90:"LIT_CHAR",91:"LIT_DOUBLE",92:"LIT_STRING",93:"RTRUE",94:"RFALSE",95:"RSTRC",96:"PUNTO"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[8,6],[8,5],[15,3],[15,1],[18,2],[18,2],[18,4],[18,4],[18,4],[18,4],[18,6],[18,6],[7,5],[7,5],[7,5],[7,6],[7,6],[7,6],[7,7],[7,7],[7,8],[7,8],[19,1],[19,1],[19,1],[19,1],[26,3],[26,1],[24,3],[24,2],[33,2],[33,1],[35,2],[35,1],[35,2],[35,1],[35,2],[35,1],[35,1],[35,2],[35,1],[35,1],[35,1],[35,1],[35,2],[35,1],[35,2],[35,1],[35,1],[35,3],[35,3],[35,2],[35,2],[43,1],[44,1],[42,3],[42,2],[41,9],[41,7],[41,8],[41,8],[41,7],[41,7],[41,6],[54,1],[54,1],[53,1],[53,1],[40,5],[40,6],[56,2],[56,2],[39,6],[38,5],[37,3],[36,4],[31,2],[31,2],[31,4],[31,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,2],[9,2],[9,6],[9,6],[9,4],[9,4],[61,3],[61,1],[21,1],[21,1],[66,3],[67,3],[67,1],[51,3],[51,3],[51,3],[51,2],[51,4],[51,1],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,1],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,1],[73,2],[73,2],[73,2],[73,1],[73,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[88,2],[88,5],[88,5],[45,3],[45,1],[97,1],[97,1],[97,1],[98,4],[99,4],[99,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; console.log($$[$0-1]);
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$ = [$$[$0]];            
break;
case 4: case 5: case 7: case 41: case 43: case 45: case 46: case 48: case 49: case 50: case 51: case 53: case 55: case 56: case 72: case 73: case 74: case 75: case 101: case 111: case 119: case 131: case 132:
 this.$ = $$[$0]; 
break;
case 6: case 36: case 40: case 42: case 44: case 47: case 52: case 54: case 126:
 this.$ = $$[$0-1]; 
break;
case 8:
 this.$ = new DefStruct($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 9:
 this.$ = new DefStruct($$[$0-3],[],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 10: case 34: case 99: case 142:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 11: case 35: case 39: case 100: case 143:
 this.$ = [$$[$0]]; 
break;
case 12: case 13:
 this.$ = new Atributo(new Tipo($$[$0-1],0),$$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 14: case 15:
 this.$ = new Atributo(new Tipo($$[$0-3],0),$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 16: case 17:
 this.$ = new Atributo(new Tipo($$[$0-3],1),$$[$0],null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 18: case 19:
 this.$ = new Atributo(new Tipo($$[$0-5],1),$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 20:
 this.$ = new DecFun(new Tipo($$[$0-4],0),$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 21:
 this.$ = new DecFun(new Tipo('$VOID',0),$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 22:
 this.$ = new DecFun(new Tipo($$[$0-4],0),$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 23: case 25:
 this.$ = new DecFun(new Tipo($$[$0-5],0),$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 24:
 this.$ = new DecFun(new Tipo('$VOID',0),$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 26: case 27:
 this.$ = new DecFun(new Tipo($$[$0-6],1),$$[$0-3],[],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 28: case 29:
 this.$ = new DecFun(new Tipo($$[$0-7],1),$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 30:
 this.$ = 'INT' 
break;
case 31:
 this.$ = 'DOUBLE' 
break;
case 32:
 this.$ = 'CHAR' 
break;
case 33:
 this.$ = 'BOOL' 
break;
case 37:
 this.$ = []; 
break;
case 38:
 this.$ = $$[$0-1]; this.$.push($$[$0]) 
break;
case 57:
 this.$ = new IncDec(new Acceso($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),1,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 58:
 this.$ = new IncDec(new Acceso($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),-1,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 59: case 128:
 this.$ = new IncDec(new Acceso($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),1,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 60: case 129:
 this.$ = new IncDec(new Acceso($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),-1,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 61:
 this.$ = new Break(_$[$0].first_line,_$[$0].first_column); 
break;
case 62:
 this.$ = new Continue(_$[$0].first_line,_$[$0].first_column); 
break;
case 63:
 this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 64:
 this.$ = new Return(null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 65:
 this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column); 
break;
case 66:
 this.$ = new For($$[$0-4],null,null,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 67:
 this.$ = new For($$[$0-5],$$[$0-3],null,$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 68:
 this.$ = new For(null,$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 69:
 this.$ = new For(null,null,$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 70:
 this.$ = new For(null,$$[$0-3],null,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 71:
 this.$ = new For(null,null,null,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 76:
 this.$ = new IF($$[$0-2],$$[$0],null,_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 77:
 this.$ = new IF($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 78:
 this.$ = new Else(null,$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 79:
 this.$ = new Else($$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 80:
 this.$ = new DoWhile($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 81:
 this.$ = new While($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 82:
 this.$ = new Asignacion(new Acceso($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 83:
 this.$ = new Print($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 84: case 85:
 this.$ = new ParametroFormal(new Tipo($$[$0-1],0),$$[$0]); 
break;
case 86:
 this.$ = new ParametroFormal(new Tipo($$[$0-3],1),$$[$0]); 
break;
case 87:
 this.$ = new ParametroFormal(new Tipo($$[$0-3],1),$$[$0])  
break;
case 88:
 this.$ = new DeclaracionJ(new Tipo($$[$0-3],0),$$[$0-2],false,false,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); console.log(this.$);     
break;
case 89:
 this.$ = new DeclaracionJ(new Tipo($$[$0-3],0),$$[$0-2],false,false,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);        
break;
case 90:
 this.$ = new DeclaracionJ(new Tipo('$VAR',0),[$$[$0-2]],false,false,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);  
break;
case 91:
 this.$ = new DeclaracionJ(null,[$$[$0-2]],true,false,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);     
break;
case 92:
 this.$ = new DeclaracionJ(null,[$$[$0-2]],false,true,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);     
break;
case 93: case 94:
 this.$ = new DeclaracionJ(new Tipo($$[$0-1],0),$$[$0],false,false,null,_$[$0-1].first_line,_$[$0-1].first_column);      
break;
case 95: case 96:
 this.$ = new DeclaracionJ(new Tipo($$[$0-5],1),$$[$0-2],false,false,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 97: case 98:
 this.$ = new DeclaracionJ(new Tipo($$[$0-3],1),$$[$0],false,false,null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 106:
 this.$ = new OpeLogica(TipoOpeJ.AND,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 107:
 this.$ = new OpeLogica(TipoOpeJ.OR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 108:
 this.$ = new OpeLogica(TipoOpeJ.XOR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 109:
 this.$ = new OpeLogica(TipoOpeJ.NOT,$$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 112:
 this.$ = new OpeRel(TipoOpeJ.MAYOR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 113:
 this.$ = new OpeRel(TipoOpeJ.MENOR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 114:
 this.$ = new OpeRel(TipoOpeJ.MAYORIGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 115:
 this.$ = new OpeRel(TipoOpeJ.MENORIGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 116:
 this.$ = new OpeRel(TipoOpeJ.IGUALQUE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 117:
 this.$ = new OpeRel(TipoOpeJ.DIFERENTE,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 118:
 this.$ = new OpeRel(TipoOpeJ.IGUALREF,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 120:
 this.$ = new OpeArit(TipoOpeJ.SUMA,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 121:
 this.$ = new OpeArit(TipoOpeJ.RESTA,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 122:
 this.$ = new OpeArit(TipoOpeJ.MULT,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 123:
 this.$ = new OpeArit(TipoOpeJ.DIV,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 124:
 this.$ = new OpeArit(TipoOpeJ.MOD,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 125:
 this.$ = new OpeArit(TipoOpeJ.POT,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 127:
 this.$ = new Acceso($$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
case 130:
 this.$ = new OpeArit(TipoOpeJ.NEGATIVO,$$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 133:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_INT,_$[$0].first_line,_$[$0].first_column);      
break;
case 134:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_CHAR,_$[$0].first_line,_$[$0].first_column);     
break;
case 135:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_DOUBLE,_$[$0].first_line,_$[$0].first_column);   
break;
case 136:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_STRING,_$[$0].first_line,_$[$0].first_column);   
break;
case 137:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_TRUE,_$[$0].first_line,_$[$0].first_column);     
break;
case 138:
 this.$ = new LiteralJ($$[$0],TipoLit.LIT_FALSE,_$[$0].first_line,_$[$0].first_column);    
break;
case 140: case 141:
 this.$ = new StrcArray(new Tipo($$[$0-3],1),$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 144:
 this.$ = new Identificador($$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,11:$V0,12:$V1,19:7,25:$V2,27:$V3,28:$V4,29:$V5,30:$V6,62:$V7,64:$V8,65:$V9},{1:[3]},{5:[1,18],6:19,7:4,8:5,9:6,11:$V0,12:$V1,19:7,25:$V2,27:$V3,28:$V4,29:$V5,30:$V6,62:$V7,64:$V8,65:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,7],{10:[1,20]}),{12:[1,21],14:[1,22],61:23},{12:[1,24]},{12:[1,25],14:[1,26],61:27},{12:[1,28]},{12:[1,29]},{12:[1,30]},{12:[1,31]},o($Vb,[2,30]),o($Vb,[2,31]),o($Vb,[2,32]),o($Vb,[2,33]),{1:[2,1]},o($Va,[2,2]),o($Va,[2,6]),o($Vc,$Vd,{22:[1,32]}),{16:[1,33]},o($Ve,[2,93],{17:$Vf,20:[1,34]}),{22:[1,36]},o($Vc,$Vd,{22:[1,37]}),{16:[1,38]},o($Ve,[2,94],{17:$Vf,20:[1,39]}),{13:[1,40]},{63:[1,41]},{63:[1,42]},{63:[1,43]},{12:$Vg,19:47,23:[1,44],26:45,27:$V3,28:$V4,29:$V5,30:$V6,31:46},{12:[1,49],61:50},{12:$Vh,21:51,22:$Vi,32:$Vj,45:59,51:52,66:53,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:[1,74]},{12:$Vg,19:47,23:[1,75],26:76,27:$V3,28:$V4,29:$V5,30:$V6,31:46},{12:$Vg,19:47,23:[1,77],26:78,27:$V3,28:$V4,29:$V5,30:$V6,31:46},{12:[1,79],61:80},{12:$Vh,21:81,22:$Vi,32:$Vj,45:59,51:52,66:53,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{14:[1,82]},{12:$Vh,21:83,22:$Vi,32:$Vj,45:59,51:52,66:53,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,21:84,22:$Vi,32:$Vj,45:59,51:52,66:53,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,21:85,22:$Vi,32:$Vj,45:59,51:52,66:53,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{24:86,32:$Vt},{17:$Vu,23:[1,88]},o($Vv,[2,35]),{12:[1,90],14:[1,91]},{12:[1,92],14:[1,93]},o($Vc,$Vd,{22:[1,94]}),o($Ve,[2,97],{17:$Vf,20:[1,95]}),o($Ve,[2,88]),o($Vw,[2,101],{68:$Vx,69:$Vy,70:$Vz}),o($Vw,[2,102]),{12:$Vh,22:$Vi,45:59,51:99,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,19:100,22:$Vi,27:$V3,28:$V4,29:$V5,30:$V6,45:59,51:101,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},o($VA,[2,111]),{12:$Vh,22:$Vi,45:59,51:103,67:102,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},o($VA,[2,119],{74:[1,104],75:[1,105],76:[1,106],77:[1,107],78:[1,108],79:[1,109],80:[1,110],81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),o($VH,$VI,{46:$VJ,47:$VK,96:$VL}),{12:$Vh,22:$VM,45:59,73:120,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},o($VH,[2,131]),o($VH,[2,132]),o($VN,[2,143]),o($VH,[2,133]),o($VH,[2,134]),o($VH,[2,135]),o($VH,[2,136]),o($VH,[2,137]),o($VH,[2,138]),{12:[1,122],19:123,27:$V3,28:$V4,29:$V5,30:$V6},o($VN,$VO,{14:[1,124],22:$VP}),o($VN,[2,145]),o($VN,[2,146]),o([5,10,11,12,17,20,25,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65],[2,99]),{24:126,32:$Vt},{17:$Vu,23:[1,127]},{24:128,32:$Vt},{17:$Vu,23:[1,129]},o($Vc,$Vd,{22:[1,130]}),o($Ve,[2,98],{17:$Vf,20:[1,131]}),o($Ve,[2,89]),{12:$VQ,15:132,16:[1,133],18:134,19:135,27:$V3,28:$V4,29:$V5,30:$V6},o($Ve,[2,90]),o($Ve,[2,91]),o($Ve,[2,92]),o($Va,[2,20]),{8:150,9:141,11:$V0,12:$VR,19:153,27:$V3,28:$V4,29:$V5,30:$V6,33:137,34:[1,138],35:139,36:140,37:142,38:143,39:144,40:145,41:146,42:147,43:148,44:149,45:151,48:$VS,49:$VT,50:$VU,52:$VV,55:$VW,58:$VX,59:$VY,60:$VZ,62:$V7,64:$V8,65:$V9,97:63,98:72,99:73},{24:162,32:$Vt},{12:$Vg,19:47,27:$V3,28:$V4,29:$V5,30:$V6,31:163},o($Vv,[2,84]),{16:[1,164]},o($Vv,[2,85]),{16:[1,165]},{12:$Vg,19:47,23:[1,166],26:167,27:$V3,28:$V4,29:$V5,30:$V6,31:46},{12:$Vh,21:168,22:$Vi,32:$Vj,45:59,51:52,66:53,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$Vi,45:59,51:169,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$Vi,45:59,51:170,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$Vi,45:59,51:171,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},o($VA,[2,109]),{23:[1,172]},{23:[1,173],68:$Vx,69:$Vy,70:$Vz},{17:$V_,34:[1,174]},o($V$,[2,105],{68:$Vx,69:$Vy,70:$Vz}),{12:$Vh,22:$VM,45:59,73:176,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$VM,45:59,73:177,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$VM,45:59,73:178,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$VM,45:59,73:179,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$VM,45:59,73:180,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$VM,45:59,73:181,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$VM,45:59,73:182,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$VM,45:59,73:183,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$VM,45:59,73:184,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$VM,45:59,73:185,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$VM,45:59,73:186,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$VM,45:59,73:187,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$VM,45:59,73:188,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},o($VH,[2,128]),o($VH,[2,129]),{12:$Vh,97:189,98:72,99:73},o($VH,[2,130]),{12:$Vh,22:$Vi,45:59,51:101,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},o($VH,[2,139],{14:[1,190]}),{14:[1,191]},{12:$Vh,22:$Vi,45:59,51:192,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$Vi,23:[1,194],45:59,51:103,67:193,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},o($Va,[2,21]),{24:195,32:$Vt},o($Va,[2,22]),{24:196,32:$Vt},{12:$Vg,19:47,23:[1,197],26:198,27:$V3,28:$V4,29:$V5,30:$V6,31:46},{12:$Vh,21:199,22:$Vi,32:$Vj,45:59,51:52,66:53,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{16:[1,200],17:[1,201]},o($V01,[2,9]),o($V11,[2,11]),{12:[1,202],14:[1,203]},{12:[1,204],14:[1,205]},{8:150,9:141,11:$V0,12:$VR,19:153,27:$V3,28:$V4,29:$V5,30:$V6,34:[1,206],35:207,36:140,37:142,38:143,39:144,40:145,41:146,42:147,43:148,44:149,45:151,48:$VS,49:$VT,50:$VU,52:$VV,55:$VW,58:$VX,59:$VY,60:$VZ,62:$V7,64:$V8,65:$V9,97:63,98:72,99:73},o($V21,[2,37]),o($V31,[2,39]),o($V31,[2,41],{10:[1,208]}),o($V31,[2,43],{10:[1,209]}),o($V31,[2,45],{10:[1,210]}),o($V31,[2,46]),o($V31,[2,48],{10:[1,211]}),o($V31,[2,49]),o($V31,[2,50]),o($V31,[2,51]),o($V31,[2,53],{10:[1,212]}),o($V31,[2,55],{10:[1,213]}),o($V31,[2,56]),{20:$V41,46:[1,214],47:[1,215],96:$VL},{22:[1,217]},{12:$V51,14:[1,218],61:23},o([20,46,47,96],$VO,{61:27,12:$V51,14:[1,220],22:$VP}),{22:[1,221]},{24:222,32:$Vt},{22:[1,223]},{22:[1,224]},{10:[1,226],12:$Vh,22:$Vi,45:59,51:225,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},o($V61,[2,61]),o($V61,[2,62]),o($Va,[2,23]),o($Vv,[2,34]),{12:[1,227]},{12:[1,228]},{24:229,32:$Vt},{17:$Vu,23:[1,230]},o($Ve,[2,95]),o($VA,[2,106]),o([5,10,11,12,16,17,23,25,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65,69],[2,107],{68:$Vx,70:$Vz}),o([5,10,11,12,16,17,23,25,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65,69,70],[2,108],{68:$Vx}),{12:$Vh,22:$Vi,45:59,51:231,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},o($VH,[2,126]),o($Vw,[2,103]),{12:$Vh,22:$Vi,45:59,51:232,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},o($VA,[2,112],{81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),o($VA,[2,113],{81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),o($VA,[2,114],{81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),o($VA,[2,115],{81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),o($VA,[2,116],{81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),o($VA,[2,117],{81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),o($VA,[2,118],{81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),o($V71,[2,120],{83:$VD,84:$VE,85:$VF,86:$VG}),o($V71,[2,121],{83:$VD,84:$VE,85:$VF,86:$VG}),o($V81,[2,122],{86:$VG}),o($V81,[2,123],{86:$VG}),o($V81,[2,124],{86:$VG}),o($VH,[2,125]),o($VN,[2,142]),{12:$Vh,22:$Vi,45:59,51:233,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$Vi,45:59,51:234,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{16:[1,235],68:$Vx,69:$Vy,70:$Vz},{17:$V_,23:[1,236]},o($VN,[2,149]),o($Va,[2,24]),o($Va,[2,25]),{24:237,32:$Vt},{17:$Vu,23:[1,238]},o($Ve,[2,96]),o($V01,[2,8]),{12:$VQ,18:239,19:135,27:$V3,28:$V4,29:$V5,30:$V6},o($V11,[2,12],{20:[1,240]}),{16:[1,241]},o($V11,[2,13],{20:[1,242]}),{16:[1,243]},o($V21,[2,36]),o($V31,[2,38]),o($V31,[2,40]),o($V31,[2,42]),o($V31,[2,44]),o($V31,[2,47]),o($V31,[2,52]),o($V31,[2,54]),o($V31,[2,59],{10:[1,244]}),o($V31,[2,60],{10:[1,245]}),{12:$Vh,21:246,22:$Vi,32:$Vj,45:59,51:52,66:53,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$Vi,45:59,51:247,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{16:[1,248]},o([10,11,12,17,20,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65],$Vd),{12:$Vh,16:[1,249],22:$Vi,45:59,51:192,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,22:$Vi,45:59,51:250,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{59:[1,251]},{12:$Vh,22:$Vi,45:59,51:252,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{9:255,10:[1,254],12:$VR,19:153,27:$V3,28:$V4,29:$V5,30:$V6,37:256,45:257,53:253,62:$V7,64:$V8,65:$V9,97:63,98:72,99:73},{10:[1,258],68:$Vx,69:$Vy,70:$Vz},o($V31,[2,64]),o($Vv,[2,86]),o($Vv,[2,87]),o($Va,[2,26]),{24:259,32:$Vt},o($VA,[2,110]),o($V$,[2,104],{68:$Vx,69:$Vy,70:$Vz}),{16:[1,260],68:$Vx,69:$Vy,70:$Vz},{16:[1,261],68:$Vx,69:$Vy,70:$Vz},o($VN,[2,147]),o($VN,[2,148]),o($Va,[2,27]),{24:262,32:$Vt},o($V11,[2,10]),{12:$Vh,21:263,22:$Vi,32:$Vj,45:59,51:52,66:53,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:[1,264]},{12:$Vh,21:265,22:$Vi,32:$Vj,45:59,51:52,66:53,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:[1,266]},o($V31,[2,57]),o($V31,[2,58]),o([10,11,12,23,27,28,29,30,34,48,49,50,52,55,58,59,60,62,64,65],[2,82]),{23:[1,267],68:$Vx,69:$Vy,70:$Vz},{12:$V51,61:50},{12:$V51,61:80},{23:[1,268],68:$Vx,69:$Vy,70:$Vz},{22:[1,269]},{23:[1,270],68:$Vx,69:$Vy,70:$Vz},{10:[1,271]},{10:[1,273],12:$Vh,22:$Vi,45:59,51:272,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{10:[2,74]},{10:[2,75]},{20:$V41,96:$VL},o($V31,[2,63]),o($Va,[2,28]),o($VH,[2,140]),o($VH,[2,141]),o($Va,[2,29]),o($V11,[2,14]),o($V11,[2,16],{20:[1,274]}),o($V11,[2,15]),o($V11,[2,17],{20:[1,275]}),o($V61,[2,83]),{24:276,32:$Vt},{12:$Vh,22:$Vi,45:59,51:277,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{24:278,32:$Vt},{10:[1,280],12:$Vh,22:$Vi,45:59,51:279,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{10:[1,281],68:$Vx,69:$Vy,70:$Vz},{12:$Vh,22:$Vi,23:[1,283],37:285,45:286,51:284,54:282,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,21:287,22:$Vi,32:$Vj,45:59,51:52,66:53,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{12:$Vh,21:288,22:$Vi,32:$Vj,45:59,51:52,66:53,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},o($V31,[2,81]),{23:[1,289],68:$Vx,69:$Vy,70:$Vz},o($V31,[2,76],{56:290,57:[1,291]}),{10:[1,292],68:$Vx,69:$Vy,70:$Vz},{23:[1,293]},{12:$Vh,22:$Vi,23:[1,295],37:285,45:286,51:284,54:294,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{23:[1,296]},{24:297,32:$Vt},{23:[2,72],68:$Vx,69:$Vy,70:$Vz},{23:[2,73]},o([23,68,69,70,74,75,76,77,78,79,80,81,82,83,84,85,86],$VI,{20:$V41,46:$VJ,47:$VK,96:$VL}),o($V11,[2,18]),o($V11,[2,19]),o($V61,[2,80]),o($V31,[2,77]),{24:299,32:$Vt,40:298,55:$VW},{12:$Vh,22:$Vi,23:[1,301],37:285,45:286,51:284,54:300,71:$Vk,72:56,73:58,82:$Vl,87:61,88:62,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,97:63,98:72,99:73},{24:302,32:$Vt},{23:[1,303]},{24:304,32:$Vt},{24:305,32:$Vt},o($V31,[2,71]),o($V31,[2,78]),o($V31,[2,79]),{23:[1,306]},{24:307,32:$Vt},o($V31,[2,66]),{24:308,32:$Vt},o($V31,[2,70]),o($V31,[2,69]),{24:309,32:$Vt},o($V31,[2,67]),o($V31,[2,68]),o($V31,[2,65])],
defaultActions: {18:[2,1],255:[2,74],256:[2,75],285:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var DeclaracionJ = require('../app/Compilador/InstruccionJ/DeclaracionJ').DeclaracionJ;
    var For = require('../app/Compilador/InstruccionJ/For').For;
    var Break = require('../app/Compilador/InstruccionJ/Break').Break;
    var Continue = require('../app/Compilador/InstruccionJ/Continue').Continue;
    var DefStruct = require('../app/Compilador/InstruccionJ/DefStruct').DefStruct;
    var Atributo = require('../app/Compilador/InstruccionJ/DefStruct').Atributo;
    var Return = require('../app/Compilador/InstruccionJ/Return').Return;
    var Asignacion = require('../app/Compilador/InstruccionJ/Asignacion').Asignacion;
    var Else = require('../app/Compilador/InstruccionJ/Else').Else;
    var IF = require('../app/Compilador/InstruccionJ/IF').IF;
    var DoWhile = require('../app/Compilador/InstruccionJ/DoWhile').DoWhile;
    var While = require('../app/Compilador/InstruccionJ/While').While;
    var Print = require('../app/Compilador/InstruccionJ/Print').Print;
    var DecFun = require('../app/Compilador/InstruccionJ/DecFun').DecFun;
    var LiteralJ = require('../app/Compilador/ExpresionJ/LiteralJ').LiteralJ;
    var Identificador = require('../app/Compilador/ExpresionJ/Identificador').Identificador;
    var Acceso = require('../app/Compilador/ExpresionJ/Acceso').Acceso;
    var IncDec = require('../app/Compilador/ExpresionJ/IncDec').IncDec;
    var TipoLit = require('../app/Compilador/ExpresionJ/LiteralJ').TipoLit;
    var TipoOpeJ = require('../app/Compilador/ExpresionJ/OperacionesJ/OperacionJ').TipoOpeJ;
    var StrcArray = require('../app/Compilador/ExpresionJ/STRC/StrcArray').StrcArray;
    var OpeArit = require('../app/Compilador/ExpresionJ/OperacionesJ/OpeArit').OpeArit;
    var OpeRel = require('../app/Compilador/ExpresionJ/OperacionesJ/OpeRel').OpeRel;
    var OpeLogica = require('../app/Compilador/ExpresionJ/OperacionesJ/OpeLogica').OpeLogica;
    var Tipo = require('../app/Compilador/TSJ/Tipo').Tipo;
    var ParametroFormal = require('../app/Compilador/TSJ/ParametroFormal').ParametroFormal;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content */
break;
case 4:/* skip whitespace */
break;
case 5:return  'RNULL'
break;
case 6:return  'RINTEGER'
break;
case 7:return  'RDOUBLE'
break;
case 8:return  'RCHAR'
break;
case 9:return  'RBOOLEAN'
break;
case 10:return  'RIMPORT'
break;
case 11:return  'RVAR'
break;
case 12:return  'RCONST'
break;
case 13:return  'RGLOBAL'
break;
case 14:return  'RTRUE'
break;
case 15:return  'RFALSE'
break;
case 16:return  'RIF'
break;
case 17:return  'RELSE'
break;
case 18:return  'RSWITCH'
break;
case 19:return  'RCASE'
break;
case 20:return  'RDEFAULT'
break;
case 21:return  'RBREAK'
break;
case 22:return  'RCONTINUE'
break;
case 23:return  'RRETURN'
break;
case 24:return  'RPRINT'
break;
case 25:return  'RPUBLIC'
break;
case 26:return  'RPRIVATE'
break;
case 27:return  'RVOID'
break;
case 28:return  'RFOR'
break;
case 29:return  'RWHILE'
break;
case 30:return  'RDEFINE'
break;
case 31:return  'RAS'
break;
case 32:return  'RSTRC'
break;
case 33:return  'RDO'
break;
case 34:return  'RTRY'
break;
case 35:return  'RCATCH'
break;
case 36:return  'RTHROW'
break;
case 37:return  'LIT_DOUBLE'
break;
case 38:return  'LIT_INTEGER'
break;
case 39:return  'ID'
break;
case 40:return  'LIT_STRING'
break;
case 41:return  'LIT_CHAR'
break;
case 42:return  'INCREMENTO'
break;
case 43:return  'DECREMENTO'
break;
case 44:return  'POR'
break;
case 45:return  'DIV'
break;
case 46:return  'MENOS'
break;
case 47:return  'MAS'
break;
case 48:return  'POT'
break;
case 49:return  'MOD'
break;
case 50:return  'MAYORIGUAL'
break;
case 51:return  'MENORIGUAL'
break;
case 52:return  'IGUALREF'
break;
case 53:return  'IGUALQUE'
break;
case 54:return  'MENOR'
break;
case 55:return  'MAYOR'
break;
case 56:return  'DIFERENTE'
break;
case 57:return  'IGUAL'
break;
case 58:return  'AND'
break;
case 59:return  'OR'
break;
case 60:return  'NOT'
break;
case 61:return  'XOR'
break;
case 62:return  'TERNARIO'
break;
case 63:return  'PARIZQ'
break;
case 64:return  'PARDER'
break;
case 65:return  'CORIZQ'
break;
case 66:return  'CORDER'
break;
case 67:return  'LLAVEIZQ'
break;
case 68:return  'LLAVEDER'
break;
case 69:return  'DOSPTIGUAL'
break;
case 70:return  'IGUAL'
break;
case 71:return  'PTCOMA'
break;
case 72:return  'DOSPT'
break;
case 73:return  'COMA'
break;
case 74:return  'PUNTO'
break;
case 75:return  'EOF'
break;
case 76:return  'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:import\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:public\b)/i,/^(?:private\b)/i,/^(?:void\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:do\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:[a-zA-Z_ñ]([a-zA-Z0-9_Ñ]*))/i,/^(?:(")([^\\"]|\\.)*("))/i,/^(?:(')([^\\']|\\n|\\t|\\r|\\|\\0)('))/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^\^)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:===)/i,/^(?:==)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?::=)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaJSharp;
exports.Parser = GramaticaJSharp.Parser;
exports.parse = function () { return GramaticaJSharp.parse.apply(GramaticaJSharp, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}